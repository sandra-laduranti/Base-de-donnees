USE ouf_tim

/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Procedure de creation de Acteur */
/*Auteur(s): PATRICK POL*/
/*Testeur(s):PATRICK POL */
/*Intégrateur: SANDRA LADURANTI*/

IF OBJECT_ID('dbo.Acteur_creer', 'P') IS NOT NULL
    DROP PROCEDURE dbo.Acteur_creer;
GO 
CREATE PROCEDURE dbo.Acteur_creer
(
    @Nom NVARCHAR (50),
    @Prenom NVARCHAR (50),
    @Date_naissance DATE,
    @Sexe NVARCHAR (50),
    @Date_deces DATE,
    @Nom_de_scene NVARCHAR (50),
    @Biographie NVARCHAR (MAX),
    @Nationalite NVARCHAR (50)
)

AS

BEGIN
    IF @Nom LIKE '%[0-9/*%@(){}+&]%' OR @Nom  = '' OR @Nom LIKE '%  %'
    BEGIN
        PRINT('Le nom n''est pas valide');
        RETURN 0;
    END
    
    IF @Prenom LIKE '%[0-9/*%@(){}+&]%' OR @Prenom  = '' OR @Prenom LIKE '%  %'
    BEGIN
        PRINT('Le prenom n''est pas valide');
        RETURN 0;
    END

    IF @Date_naissance > GETDATE() OR @Date_naissance < '1825/01/01'
    BEGIN
        PRINT('La date de naissance n''est pas valide');
        RETURN 0;
    END

    IF @Sexe NOT LIKE 'Madame' AND @Sexe NOT LIKE 'Monsieur' OR @Sexe = '' OR @Sexe LIKE '%  %'
    BEGIN
        PRINT('Le sexe n''est pas valide');
        RETURN 0;
    END

    IF @Date_deces > GETDATE()
    BEGIN
        PRINT('La date de deces non valide');
        RETURN 0;
    END

    IF @Nom_de_scene NOT LIKE '%[A-Za-z ''-]%' OR @Nom_de_scene = ''
    BEGIN
        PRINT('Le nom de scene non valide');
        RETURN 0;
    END

    IF @Biographie NOT LIKE '%[A-Za-z ''- 0-9]%' OR @Biographie  = ''
    BEGIN
        PRINT('La biographie non valide');
        RETURN 0;
    END

    IF @Nationalite LIKE '%[0-9/*%@(){}+&]%' OR @Nationalite = '' OR @Nationalite LIKE '%  %'
    BEGIN
        PRINT('La nationalite non valide');
        RETURN 0;
    END

IF NOT EXISTS (SELECT * FROM Acteur WHERE Nom=@Nom AND Prenom=@Prenom AND Date_naissance=@Date_naissance)
BEGIN
    INSERT INTO Acteur 
    (
        Nom,
        Prenom,     
        Date_naissance,
        Sexe,
        Date_deces,
        Nom_de_scene,
        Biographie,
        Nationalite,
		Supprimer

    )

    VALUES
    (
        @Nom,
        @Prenom,        
        @Date_naissance,
        @Sexe,
        @Date_deces,
        @Nom_de_scene,
        @Biographie,
        @Nationalite,
		0
    )
    PRINT 'Nouvel acteur ajouté';
    return 1;
END

ELSE
BEGIN
    PRINT 'Cet acteur existe déjà';
END

END
GO


---------------------------------------------
/*BdD ouf_tim                               */
/*Procedure de creation d'un compte        */
/*Auteur(s): HUA Lucien                    */
/*testeur(s): LADURANTI Sandra             */
/*Intégrateur: LADURANTI Sandra            */
---------------------------------------------

IF OBJECT_ID('dbo.Compte_creer', 'P') IS NOT NULL
    DROP PROCEDURE dbo.Compte_creer;
GO 
CREATE PROCEDURE dbo.Compte_creer
(
    @Numero_bancaire NVARCHAR (50),
    @Montant MONEY,
    @Somme_operations Money
)

AS

BEGIN
    IF @Numero_bancaire NOT LIKE '%[0-9]%'
    BEGIN
        PRINT('Numero bancaire non valide');
        RETURN 0;
    END

    IF @Montant < 0
    BEGIN
        PRINT('Le montant est non valide');
        RETURN 0;
    END

    IF @Somme_operations < 0
    BEGIN
        PRINT('La somme des operations est non valide');
        RETURN 0;
    END

    IF NOT EXISTS (SELECT * FROM Compte WHERE Numero_bancaire=@Numero_bancaire)
    BEGIN
        INSERT INTO Compte 
        (
            Numero_bancaire,
            Montant,
            Somme_operations,
            Supprimer    
        )

        VALUES
        (
            @Numero_bancaire,
            @Montant,
            @Somme_operations,
            0
        )
    PRINT 'Nouveau compte ajouté'
    END

    ELSE
    BEGIN
    PRINT 'Ce compte existe déjà';
    END

END
GO


/*L2 ATIC 2013 GROUPE ouf_tim               */
/*BdD ouf_tim                               */
/*Procedure de creation de distinctions    */
/*Auteur(s): TSVETKOV Alexandre            */
/*testeur(s): PATRICK POL LADURANTI Sandra */
/*Intégrateur: LADURANTI Sandra            */

IF OBJECT_ID('dbo.Distinctions_creer', 'P') IS NOT NULL
    DROP PROCEDURE dbo.Distinctions_creer;
GO 
CREATE PROCEDURE dbo.Distinctions_creer
(
    @Nom NVARCHAR (50),
    @Lieu NVARCHAR (50),
    @Annee INT
)

AS

BEGIN
    IF @Nom LIKE '%[0-9/*%@(){}+&]%' OR  @Nom LIKE ''  OR @Nom LIKE '%  %' 
    BEGIN
        PRINT'Le nom de la distinction est non valide';
        RETURN 0;
    END

    IF @Lieu NOT LIKE '%[A-Za-z ''-]%' OR @Lieu  LIKE '' AND @Lieu LIKE ' ' 
    BEGIN
        PRINT'Le lieu de la distinction est non valide';
        RETURN 0;
    END

    IF @Annee > YEAR(GETDATE()) OR @Annee < 1895 
    BEGIN
        PRINT'L''annee de la distinction est non valide';
        RETURN 0;
    END


    IF NOT EXISTS (SELECT * FROM Distinctions WHERE Nom=@Nom AND Lieu=@Lieu AND Annee=@Annee)
    BEGIN
        INSERT INTO Distinctions 
        (
            Nom,
            Lieu,
            Annee
        )

        VALUES
        (
            @Nom,
            @Lieu,
            @Annee
        )
        PRINT'Nouvelle distinction ajouté';
    END

    ELSE
    BEGIN
        PRINT'Cette distinction existe déjà';
    END

END
GO


/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Procedure de creation de genre */
/*Auteur(s): PATRICK POL*/
/*Testeur(s):PATRICK POL */
/*Intégrateur: SANDRA LADURANTI*/

IF OBJECT_ID('dbo.Genre_creer', 'P') IS NOT NULL
    DROP PROCEDURE dbo.Genre_creer;
GO 
CREATE PROCEDURE dbo.Genre_creer
(
    @Nom NVARCHAR (50)  
)

AS

BEGIN
    
    IF @Nom LIKE '%[0-9/*%@(){}+&]%' OR @NOM = '' OR @Nom LIKE '%  %'
    BEGIN
        PRINT('Le nom non valide');
        RETURN 0;
    END

    IF NOT EXISTS (SELECT * FROM Genre WHERE Nom=@Nom)
    BEGIN
        INSERT INTO Genre 
        (
            Nom 
        )

        VALUES
        (
            @Nom    
        )
        PRINT 'Nouveau genre ajouté'
    END

    ELSE
    BEGIN
        PRINT('Ce genre existe déjà');
    END

END
GO

--------------------------------------------------
/* BdD : < Ouf'tim >                            */
/* Procédure de création d'un film          */
/* Auteur : GOUALARD Mickael                    */
/*testeur(s): GOUALARD Mickael          */
/*Intégrateur: LADURANTI Sandra         */
--------------------------------------------------

IF OBJECT_ID ('film_creer', 'P') IS NOT NULL
    DROP PROCEDURE  film_creer;
GO
CREATE PROCEDURE film_creer
(
    @Titre NVARCHAR (50) ,
    @Complement_titre NVARCHAR (50),
    @Annee_de_sortie INT ,
    @Nationalite NVARCHAR (50) ,
    @Duree INT
    
)
AS

BEGIN 

    IF @Titre NOT LIKE '%[A-Za-z ''- 0-9]%' OR @Titre LIKE ''
    BEGIN 
     PRINT 'Le titre est non valide';
     RETURN 0; 
    END
    
    IF @Complement_titre LIKE ' '
    BEGIN 
     PRINT 'Le Complement du titre est non valide';
     RETURN 0; 
    END
    
    IF @Annee_de_sortie < 1895 OR @Annee_de_sortie > YEAR(GETDATE())
    BEGIN 
     PRINT 'Annee de sortie est non valide';
     RETURN 0; 
    END

    IF @Nationalite LIKE '%[0-9/*%@(){}+&]%' OR @Nationalite LIKE '' OR @Nationalite LIKE '%  %'
    BEGIN 
     PRINT 'La nationalite est non valide';
     RETURN 0; 
    END

    IF @Duree <= 10
    BEGIN 
     PRINT 'La duree est non valide';
     RETURN 0; 
    END



IF NOT EXISTS (SELECT * FROM Films WHERE Titre=@Titre)
 BEGIN
    INSERT INTO Films
        (
        Titre,
        Complement_titre,
        Annee_de_sortie,
        Nationalite,
        Duree,
		Supprimer
        )
    
    VALUES
        (
        @Titre,
        @Complement_titre,
        @Annee_de_sortie,
        @Nationalite,
        @Duree,
		0
        )
    PRINT 'Nouveau Film ajouté';
 END

 ELSE
 BEGIN
    PRINT 'Ce Film existe déjà';
 END

END
GO



--------------------------------------------
/* Groupe : < Ouf'Tim >                    */
/* Procedure de creation d'un exemplaire   */
/* Auteur: BROCHEN Elise                   */
/*testeur(s): BROCHEN Elise        */
/*Intégrateur: LADURANTI Sandra            */
--------------------------------------------

IF OBJECT_ID ('exemplaires_creer','P') IS NOT NULL
    DROP PROCEDURE exemplaires_creer;
GO

CREATE PROCEDURE exemplaires_creer
(
    @Date_approvisionnement DATETIME ,
    @Taux_usure INT ,
    @Disponibilite BIT ,
    @Reserve BIT,
    @FK_numero_edition INT
    )
AS

BEGIN


    IF @Taux_usure > 5
    BEGIN
        PRINT 'Le taux d''usure est non valide';
        RETURN 0;
    END

    IF @Disponibilite < 0 AND @Disponibilite > 1
    BEGIN
        PRINT 'La disponibilite est non valide';
        RETURN 0;
    END

    IF @Reserve < 0 AND @Reserve > 1
    BEGIN
        PRINT 'Le booleen reserve est non valide';
        RETURN 0;
    END

	IF NOT EXISTS (SELECT Numero_edition FROM Edition WHERE Numero_edition = @FK_numero_edition)
	BEGIN
		PRINT 'Numero d''edition inexistant'
		RETURN;
	END



    INSERT INTO Exemplaires
        (
        Date_approvisionnement,
        Taux_usure,
        Disponibilite,
        Reserve,
        Supprimer, 
        FK_numero_edition
        )

        VALUES
        (
        @Date_approvisionnement,
        @Taux_usure,
        @Disponibilite,
        @Reserve,
        0,
        @FK_numero_edition
        )

    PRINT 'Un nouvel exemplaire a été ajoute';




END
GO


/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Procedure de creation d'un réalisteur */
/*Auteur(s): BROCHEN Elise*/
/*testeur(s): PATRICK POL LADURANTI Sandra*/
/*Intégrateur: LADURANTI Sandra */

IF OBJECT_ID('dbo.Realisateur_creer', 'P') IS NOT NULL
    DROP PROCEDURE dbo.Realisateur_creer;
GO 
CREATE PROCEDURE dbo.Realisateur_creer
(
    @Nom NVARCHAR (50),
    @Prenom NVARCHAR (50),
    @Date_naissance DATE,
    @Sexe NVARCHAR (50),
    @Date_deces DATE,
    @Biographie NVARCHAR (MAX),
    @Nationalite NVARCHAR (50)
)

AS

BEGIN
    IF @Nom LIKE '%[0-9/*%@(){}+&]%' Or @Nom LIKE '' Or @Nom LIKE '%  %'
    BEGIN
        PRINT 'Le nom n''est pas valide';
        RETURN 0;
    END
    
    IF @Prenom LIKE '%[0-9/*%@(){}+&]%' OR @Prenom LIKE '' Or @Prenom LIKE '%  %'
    BEGIN
        PRINT 'Le prenom n''est pas valide';
        RETURN 0;
    END

    IF @Date_naissance > GETDATE() OR @Date_naissance < '1825/01/01'
    BEGIN
        PRINT 'La date de naissance n''est pas valide';
        RETURN 0;
    END

    IF @Sexe NOT LIKE 'Madame' AND @Sexe NOT LIKE 'Monsieur' OR @Sexe = '' OR @Sexe LIKE '%  %'
    BEGIN
        PRINT 'Le sexe n''est pas valide';
        RETURN 0;
    END

    IF @Date_deces > GETDATE() OR @Date_deces < @Date_naissance
    BEGIN
        PRINT 'La date de deces n''est pas valide';
        RETURN 0;
    END 

    IF @Biographie NOT LIKE '%[A-Za-z ''-]%'
    BEGIN
        PRINT 'La biographie n''est pas valide';
        RETURN 0;
    END

    /*IF @Nationalite NOT LIKE '%[A-Za-z ''-]%' Or @Nationalite LIKE ''
    BEGIN
        PRINT('La nationalite n''est pas valide');
        RETURN 0;
    END
    */
IF NOT EXISTS (SELECT * FROM Realisateur WHERE Nom=@Nom AND Prenom=@Prenom AND Date_naissance=@Date_naissance)
BEGIN
    INSERT INTO Realisateur
    (
        Nom,
        Prenom,     
        Date_naissance,
        Sexe,
        Date_deces,
        Biographie,
        Nationalite,
		Supprimer
    )

    VALUES
    (
        @Nom,
        @Prenom,        
        @Date_naissance,
        @Sexe,
        @Date_deces,
        @Biographie,
        @Nationalite,
		0
    )
    PRINT 'Un nouveau réalisateur a été ajouté'
END

ELSE
BEGIN
    PRINT('Ce réalisateur existe déjà');
END

END
GO


/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Procedure de creation des sous titres */
/*Auteur(s): LADURANTI Sandra*/
/*testeur(s): LADURANTI Sandra */
/*Intégrateur: LADURANTI Sandra */

IF OBJECT_ID('Langue_sous_titre_creer', 'P') IS NOT NULL
    DROP PROCEDURE Langue_sous_titre_creer;
GO 
CREATE PROCEDURE Langue_sous_titre_creer
(
    @Nom NVARCHAR (50)
)

AS

BEGIN
    
    IF @Nom LIKE '%[0-9/*%@(){}+&]%' OR @Nom LIKE '' OR @Nom LIKE '%  %' 
    BEGIN
        PRINT('Le nom n''est pas valide');
        RETURN 0;
    END

IF NOT EXISTS (SELECT * FROM Langue_sous_titre WHERE Nom=@Nom)
BEGIN
    INSERT INTO Langue_sous_titre
    (
        Nom 
    )

    VALUES
    (
        @Nom    
    )
    PRINT 'Nouveau sous-titre ajouté'
END

ELSE
BEGIN
    PRINT('Ce sous-titrage existe déjà');
END

END
GO

/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Procedure de creation de l'appartenance */
/*Auteur(s): PATRICK POL*/
/*testeur(s): PATRICK POL LADURANTI Sandra*/
/*Intégrateur: LADURANTI Sandra */

IF OBJECT_ID('dbo.Appartenir_creer', 'P') IS NOT NULL
    DROP PROCEDURE dbo.Appartenir_creer;
GO 
CREATE PROCEDURE dbo.Appartenir_creer
(
    @FK_titre NVARCHAR (50),
    @FK_complement_titre NVARCHAR (50),
    @FK_nom_genre NVARCHAR (50)
)

AS

BEGIN

    INSERT INTO dbo.Appartenir 
    (
		Supprimer,
        FK_Titre,
        FK_complement_titre,
        FK_nom_genre
    )
    VALUES
    (
		0,
        @FK_Titre,
        @FK_complement_titre,
        @FK_nom_genre
    )

    PRINT 'Appartenir Ajoute'                             

END 
GO  

/*L2 ATIC 2013 GROUPE ouf_tim              */
/*BdD ouf_tim                              */
/*Procedure unitaire de relance_retards    */
/*Auteur(s):  POL Patrick				   */
/*testeur(s): POL Patrick			       */
/*Correcteur : Patrick POL				   */
/*Intégrateur: LADURANTI Sandra            */

IF OBJECT_ID('[dbo].[relance_retard_creer]', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[relance_retard_creer];
GO
CREATE PROCEDURE [dbo].[relance_retard_creer](
	@Niveau_de_retard INT,
	@Date_creation DATETIME ,
    @Date_mise_a_jour DATETIME,
    @Etat NVARCHAR(50), /* En cours, Supprime*/
    @FK_num_location int
)

AS
BEGIN
	IF @Niveau_de_retard < 0 AND @Niveau_de_retard > 6
		BEGIN
		PRINT 'Le niveau de retard n''est pas valide'
		RETURN;
		END
	
	IF @Date_creation > CURRENT_TIMESTAMP
		BEGIN
			PRINT 'La date création est invalide'
			RETURN;
		END
	
	IF @Date_mise_a_jour < @Date_creation
		BEGIN
			PRINT 'La date de MAJ est invalide'
			RETURN;
		END
	
	IF @Etat NOT LIKE 'En cours' AND @Etat NOT LIKE 'Supprimer'
		BEGIN
			PRINT 'L''état est invalide'
			RETURN;
		END
	
	IF @FK_num_location NOT LIKE (SELECT Numero_location FROM Locations WHERE Numero_location = @FK_num_location)
		BEGIN
			PRINT 'Le numéro de location n''existe pas'
			RETURN;
		END
		

		INSERT INTO Relance_retards(
			Niveau_de_retard,
			Date_creation  ,
			Date_mise_a_jour ,
			Etat, 
			FK_num_location
		)
		VALUES(
			@Niveau_de_retard,
			@Date_creation,
			@Date_mise_a_jour,
			@Etat, 
			@FK_num_location
		)
	PRINT 'La relance a été crée'		
	END	
	

GO

/*L2 ATIC 2013 GROUPE ouf_tim               */
/*BdD ouf_tim                               */
/*Procedure de creation de relance_retards */
/*Auteur(s): BROCHEN Elise POL Patrick     */
/*testeur(s): BROCHEN Elise                */
/*Correcteur : Patrick POL					*/
/*Intégrateur: LADURANTI Sandra            */

IF OBJECT_ID('[dbo].[relance_retard]', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[relance_retard];
GO
CREATE procedure [dbo].[relance_retard]
 /*reservation*/
AS
begin

 /* declaree */
 DECLARE @Numero_location INT
 DECLARE @Numero_exem INT
 DECLARE @Date_retour_loc DATETIME
 DECLARE @Date_crea_retard DATETIME
 DECLARE @MAJ_retard DATETIME
 
 SET @Date_retour_loc = CURRENT_TIMESTAMP
 
 DECLARE cur_relance_retard CURSOR LOCAL FOR
  SELECT Numero_location FROM dbo.Locations
	WHERE Date_fin_prevue < CURRENT_TIMESTAMP 
		  AND Date_fin_reelle IS NULL 
 
 
 OPEN cur_relance_retard;
	FETCH NEXT FROM cur_relance_retard INTO @Numero_location;
	IF @@FETCH_STATUS =-1
	BEGIN
		PRINT 'AUCUNE LOCATION EN RETARD'
		RETURN 0;
	END
	ELSE
 
 
	while(@@FETCH_STATUS = 0)
	BEGIN
 
	SET @Numero_exem =( SELECT FK_exemplaire FROM Locations  WHERE FK_exemplaire=@Numero_exem)
	SET @Numero_location =(SELECT Numero_location FROM Locations WHERE Numero_location=@Numero_location)
	SET @Date_crea_retard = CURRENT_TIMESTAMP
	SET @MAJ_retard = NULL
	
	
	EXEC Relance_retard_creer 1,@Date_crea_retard, @MAJ_retard, 'En cours', @Numero_location
 
 PRINT 'ATTENTION VOUS ETES EN RETARD SUR VOTRE LOCATION'
 FETCH NEXT FROM cur_relance_retard INTO @Numero_location;
 END 

 CLOSE cur_relance_retard;
 DEALLOCATE cur_relance_retard;
 PRINT 'FIN DE LA TACHE DE FOND MAJ RELANCE RETARD'
 RETURN 1;
END
GO


/* Location */

/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Procedure de creation de location */
/*Auteur(s): PATRICK POL*/
/*Testeur(s):PATRICK POL */
/*Intégrateur: SANDRA LADURANTI*/


/* A CORRIGER en settant automatiquement les dates en current timestamp */
IF OBJECT_ID ('Locations_creer', 'P') IS NOT NULL
DROP PROCEDURE Locations_creer ;
GO

CREATE PROCEDURE Locations_creer
(
   @Date_debut DATETIME,
   @Duree INT,
   @Date_fin_prevue DATETIME,
   @Date_fin_reelle DATETIME,
   @FK_exemplaire INT,
   @FK_num_abonnement INT
)

AS

BEGIN 


    IF @Duree < 0 OR @Duree > 300
    BEGIN 
        PRINT 'La durée de location non valide';
    RETURN 0;
    END 

    IF @FK_exemplaire = ''
    BEGIN 
        PRINT 'Le numéro d''exemplaire n''est pas valide >> voir procédure exemplaire';
    RETURN 0;
    END 

        IF @FK_num_abonnement = ''
    BEGIN 
        PRINT 'Le numéro d''abonnement n''est pas valide >> voir procédure abonnement';
    RETURN 0;
    END


IF NOT EXISTS (SELECT * FROM Locations)
	BEGIN

    INSERT INTO Locations(
        Date_debut,
        Duree,
        Date_fin_prevue,
        Date_fin_reelle,
        FK_exemplaire,
        FK_num_abonnement
        )       

        VALUES 
        (
        @Date_debut,
        @Duree,
        @Date_fin_prevue,
        @Date_fin_reelle,
        @FK_exemplaire,
        @FK_num_abonnement
        )


        PRINT 'Nouvelle Location ajouté';
    END

    ELSE
    BEGIN
        PRINT 'Ce type de location existe déja';
    END
END 
GO


/*L2 ATIC 2013 GROUPE ouf_tim               */
/*BdD ouf_tim                               */
/*Procedure de creation de realiser        */
/*Auteur(s): BROCHEN Elise                 */
/*testeur(s): PATRICK POL LADURANTI Sandra */
/*Intégrateur: LADURANTI Sandra            */

IF OBJECT_ID ('dbo.Realiser_creer', 'P') IS NOT NULL
DROP PROCEDURE dbo.Realiser_creer ; 
GO

CREATE PROCEDURE dbo.Realiser_creer
(
   @FK_titre_film NVARCHAR(50),
   @FK_complement_titre NVARCHAR(50),
   @FK_nom_real NVARCHAR(50),
   @FK_prenom_real NVARCHAR(50),
   @FK_date_naissance NVARCHAR(50)
)

AS

BEGIN 

IF NOT EXISTS (SELECT * FROM Realiser WHERE Realiser.FK_titre_film = @FK_titre_film AND Realiser.FK_complement_titre = @FK_complement_titre)
BEGIN

    INSERT INTO Realiser
        (
		 Supprimer,
         FK_titre_film,
         FK_complement_titre,
         FK_nom_real,
         FK_prenom_real,
         FK_date_naissance
        )       

        VALUES 
        (
		 0,
         @FK_titre_film,
         @FK_complement_titre,
         @FK_nom_real,
         @FK_prenom_real,
         @FK_date_naissance
        )

        PRINT 'une nouvelle Realisation a été ajoutée'
    END

    ELSE
    BEGIN
        PRINT 'Ce type de Relalisation existe déja';
    END
END 
GO

---------------------------------------------
/*L2 ATIC 2013 GROUPE ouf_tim               */
/*BdD ouf_tim                               */
/*Procedure de creation d'un abonne        */
/*Auteur(s): HUA Lucien LADURANTI Sandra   */
/*testeur(s): LADURANTI Sandra             */
/*Intégrateur: LADURANTI Sandra            */
---------------------------------------------

IF OBJECT_ID('dbo.Abonne_creer', 'P') IS NOT NULL
    DROP PROCEDURE dbo.Abonne_creer;
GO 
CREATE PROCEDURE dbo.Abonne_creer
(
    @Nom NVARCHAR (50),
    @Prenom NVARCHAR (50),
    @Pseudo NVARCHAR (50),
    @Date_de_naissance DATE,
    @Sexe NVARCHAR (50),
    @Numero_de_voie NVARCHAR (50),
    @Complement_de_voie NVARCHAR (50),
    @Type_de_voie NVARCHAR (50),
    @Libelle NVARCHAR (50),
    @Complement_libelle NVARCHAR (50),
    @Code_postal NVARCHAR (50),
    @Ville NVARCHAR (50),
    @Cedex NVARCHAR (50),
    @Pays NVARCHAR (50),
    @Numero_telephone NVARCHAR (50),
    @Adresse_email NVARCHAR (50)
)

AS

BEGIN
    
    IF @NOM LIKE '%[0-9/*%@(){}+&]%' OR @Nom = '' OR @Nom LIKE '%  %'
    BEGIN
        PRINT('Le nom est invalide');
        RETURN 0;
    END

    IF @Prenom LIKE '%[0-9/*%@(){}+&]%' OR @Prenom = '' OR @Prenom LIKE '%  %'
    BEGIN
        PRINT('Le prenom est invalide');
        RETURN 0;
    END

    IF @Pseudo NOT LIKE '%[A-Za-z ''-]%' OR @Pseudo = '' OR @Pseudo LIKE '%  %'
    BEGIN
        PRINT('Le pseudo est invalide');
        RETURN 0;
    END

    IF @Date_de_naissance > GETDATE() OR @Date_de_naissance < '1915/01/01'
    BEGIN
        PRINT('La date de naissance est invalide');
        RETURN 0;
    END

    IF @Sexe  NOT LIKE 'Madame' AND @Sexe NOT LIKE 'Monsieur' 
    BEGIN
        PRINT('Le sexe est invalide');
        RETURN 0;
    END

    IF @Numero_de_voie NOT LIKE '%[0-9]%'
    BEGIN
        PRINT('Le numero de voie est invalide');
        RETURN 0;
    END

    IF @Complement_de_voie NOT LIKE '%[A-Za-z ''-]%' AND  @Complement_de_voie NOT LIKE ''
    BEGIN
        PRINT('Le complement de voie est invalide');
        RETURN 0;
    END

    IF @Type_de_voie NOT LIKE '%[A-Za-z ''-]%' OR @Type_de_voie = ''
    BEGIN
        PRINT('Le type de voie est invalide');
        RETURN 0;
    END

    IF @Libelle NOT LIKE '%[A-Za-z ''-]%' OR @Libelle = ''
    BEGIN
        PRINT('Le libelle est invalide');
        RETURN 0;
    END

    IF @Complement_libelle NOT LIKE '%[A-Za-z ''-]%' AND @Complement_libelle NOT LIKE ''
    BEGIN
        PRINT('Le complement libelle est invalide');
        RETURN 0;
    END

    IF @Code_postal NOT LIKE '%[0-9]%' OR @Code_postal = ''
    BEGIN
        PRINT('Le code postal est invalide');
        RETURN 0;
    END

    IF @Ville NOT LIKE '%[A-Za-z ''-]%' OR @Ville = ''
    BEGIN
        PRINT('La ville est invalide');
        RETURN 0;
    END

    IF @Cedex NOT LIKE '%[A-Za-z ''-]%' AND @Cedex NOT LIKE ''
    BEGIN
        PRINT('Le cedex est invalide');
        RETURN 0;
    END

    IF @Pays LIKE '%[0-9/*%@(){}+&]%' OR @Pays = '' OR @Pays LIKE '%  %'
    BEGIN
        PRINT('Le pays est invalide');
        RETURN 0;
    END

    IF @Numero_telephone <= 0600000000 OR @Numero_telephone >= 0799999999
    BEGIN
        PRINT('Le numero de telephone est invalide');
        RETURN 0;
    END

    IF @Adresse_email NOT LIKE '%@%' OR @Adresse_email = ''
    BEGIN
        PRINT('Le mail est invalide');
        RETURN 0;
    END


IF NOT EXISTS (SELECT * FROM Abonne WHERE Nom=@Nom AND Prenom=@Prenom AND Pseudo=@Pseudo)
BEGIN
    INSERT INTO Abonne 
    (
        Nom,
        Prenom,
        Pseudo,
        Date_de_naissance,
        Sexe,
        Numero_de_voie,
        Complement_de_voie,
        Type_de_voie,
        Libelle,
        Complement_libelle,
        Code_postal,
        Ville,
        Cedex,
        Pays,
        Numero_telephone,
        Adresse_email,
        Supprimer
    )

    VALUES
    (
        @Nom,
        @Prenom,
        @Pseudo,
        @Date_de_naissance,
        @Sexe,
        @Numero_de_voie,
        @Complement_de_voie,
        @Type_de_voie,
        @Libelle,
        @Complement_libelle,
        @Code_postal,
        @Ville,
        @Cedex,
        @Pays,
        @Numero_telephone,
        @Adresse_email,
        0
    )
    PRINT 'Nouvel abonné ajouté'
END

ELSE
BEGIN
    PRINT 'Cet abonné existe déjà';
END

END
GO


/*L2 ATIC 2013 GROUPE ouf_tim                 */
/*BdD ouf_tim                                 */
/*Procedure de creation d'abonnement         */
/*Auteur(s): BROCHEN Elise  LADURANTI Sandra */
/*testeur(s): PATRICK POL LADURANTI Sandra   */
/*Intégrateur: LADURANTI Sandra              */

IF OBJECT_ID ('dbo.Abonnement_creer', 'P') IS NOT NULL
DROP PROCEDURE dbo.Abonnement_creer ; 
GO

CREATE PROCEDURE dbo.Abonnement_creer
(
   @Date_creation DATETIME,
   @Date_expiration DATETIME,
   @FK_numcompte INT,
   @FK_type_abonnement NVARCHAR (50)
)

AS

BEGIN 

IF @Date_expiration < @Date_creation
    BEGIN 
        PRINT 'Date d''expiration non valide';
    RETURN 0;
END

IF NOT EXISTS (SELECT * FROM Compte WHERE Compte.Numero_compte=@FK_numcompte)
			BEGIN
			PRINT('Le compte n`existe pas!');
			RETURN 0;
			END

IF NOT EXISTS (SELECT * FROM Type_abonnement WHERE Type_Abonnement.Nom=@FK_type_abonnement)
			BEGIN
			PRINT('Le type d`abonnement n`existe pas!');
			RETURN 0;
			END
    



    INSERT INTO Abonnement
        (
   Date_creation,
   Date_expiration,
   FK_numcompte,
   FK_type_abonnement,
   Supprimer
        
        )       

        VALUES 
        (
   @Date_creation,
   @Date_expiration,
   @FK_numcompte,
   @FK_type_abonnement ,
   0 
        )

   PRINT 'Un nouvel Abonnement a été ajouté'
END 
GO



/*L2 ATIC 2013 GROUPE ouf_tim                 */
/*BdD ouf_tim                                 */
/*Procedure de creation de jouer             */
/*Auteur(s): BROCHEN Elise                   */
/*testeur(s): BROCHEN Elise                  */
/*Intégrateur: LADURANTI Sandra              */

use ouf_tim

IF OBJECT_ID ('dbo.Jouer_creer', 'P') IS NOT NULL
DROP PROCEDURE dbo.Jouer_creer ; 
GO

CREATE PROCEDURE dbo.Jouer_creer
(
   @FK_titre_film NVARCHAR(50),
   @FK_complement_titre NVARCHAR(50),
   @FK_nom_acteur NVARCHAR(50),
   @FK_prenom_acteur NVARCHAR(50),
   @FK_date_de_naissance_acteur DATE
)

AS

BEGIN 



    IF @FK_date_de_naissance_acteur > GETDATE() OR @FK_date_de_naissance_acteur < '1895/01/01'
    BEGIN 
        PRINT 'La FK de la date de naissance de l''acteur n''est pas valide';
    RETURN 0;

END 


IF NOT EXISTS (SELECT * FROM Jouer WHERE FK_titre_film = @FK_titre_film AND FK_complement_titre = @FK_complement_titre
 AND FK_nom_acteur = @FK_nom_acteur AND FK_prenom_acteur = @FK_prenom_acteur)
BEGIN

    INSERT INTO Jouer
        (
		 Supprimer,
         FK_titre_film,
         FK_complement_titre ,
         FK_nom_acteur,
        FK_prenom_acteur,
        FK_date_de_naissance_acteur
        )       

        VALUES 
        (
		 0,
         @FK_titre_film,
         @FK_complement_titre,
        @FK_nom_acteur,
        @FK_prenom_acteur,
        @FK_date_de_naissance_acteur

        )


        PRINT 'Un nouveau type Jouer a été ajouté'
    END

    ELSE
    BEGIN
        PRINT 'Ce type Jouer existe déja';
    END
END 
GO


/*L2 ATIC 2013 GROUPE ouf_tim                                 */
/*BdD ouf_tim                                                 */
/*Procedure de creation de Souscire                          */
/*Auteur(s): BROCHEN Elise                                   */
/*testeur(s): PATRICK POL LADURANTI Sandra  Mickael GOUALARD */
/*Intégrateur: LADURANTI Sandra                              */

IF OBJECT_ID ('dbo.Souscrire_creer', 'P') IS NOT NULL
DROP PROCEDURE dbo.Souscrire_creer ; 
GO

CREATE PROCEDURE dbo.Souscrire_creer
(
    @FK_nom_abonne NVARCHAR (50),
   @FK_prenom NVARCHAR (50),
   @FK_pseudo NVARCHAR (50),
   @FK_num_abonnement INT
)

AS

BEGIN 


IF NOT EXISTS (SELECT * FROM Souscrire WHERE FK_nom_abonne = @FK_nom_abonne AND FK_prenom = @FK_prenom 
AND FK_pseudo = @FK_pseudo AND FK_num_abonnement = @FK_num_abonnement )
BEGIN

    INSERT INTO Souscrire
        (
		Supprimer,
        FK_nom_abonne,
        FK_prenom,
        FK_pseudo,
        FK_num_abonnement
        )       

        VALUES 
        (
		0,
        @FK_nom_abonne,
        @FK_prenom,
        @FK_pseudo,
        @FK_num_abonnement
        )


        PRINT 'Nouveau Souscrire ajouté';
    END

    ELSE
    BEGIN
        PRINT 'Le type Souscrire existe déja';
    END
END 
GO

/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Procedure de creation d'une edition */
/*Auteur(s): PATRICK POL*/
/*Testeur(s):PATRICK POL */
/*Intégrateur: SANDRA LADURANTI*/

IF OBJECT_ID ('dbo.Edition_creer', 'P') IS NOT NULL
DROP PROCEDURE dbo.Edition_creer ; 
GO

CREATE PROCEDURE dbo.Edition_creer
(
        @Nom NVARCHAR (50),
        @Annee_de_sortie INT,
        @Duree_film INT,
        @limite_age INT,
        @Support NVARCHAR (50),
        @Date_insertion DATETIME,
        @Type_couleur NVARCHAR (50),
        @Type_son NVARCHAR (50),
        @FK_titre NVARCHAR (50),
        @FK_complement_titre NVARCHAR (50)
)

AS

BEGIN 
    

    IF  @Nom LIKE '%[0-9/*%@(){}+&]%' OR @Nom = '' OR @Nom LIKE '%  %'
    BEGIN 
        PRINT 'Nom edition non valide';
    RETURN 0;
END 

    IF  @Annee_de_sortie > YEAR(GETDATE()) OR @Annee_de_sortie < 1895
    BEGIN 
        PRINT 'Année de sortie non valide';
    RETURN 0;
END

    IF @limite_age < 0 OR @limite_age > 18
    BEGIN 
        PRINT 'limite d''age non valide';
    RETURN 0;
END  

    IF @Duree_film < 10 OR @Duree_film NOT LIKE '%[0-9]%'
    BEGIN 
        PRINT 'Duree film non valide';
    RETURN 0;
END  

    IF  @Support NOT LIKE '%[A-Za-z ‘’-]%' OR @Support = ''
    BEGIN 
        PRINT 'Support non valide';
    RETURN 0;
END

    IF  @Date_insertion > GETDATE()
    BEGIN 
        PRINT 'Date d''insertion non valide';
    RETURN 0;
END 

    IF  @Type_couleur LIKE '%[/*%@(){}+&]%' OR @Type_couleur = '' OR @Type_couleur LIKE '%  %'
    BEGIN 
        PRINT 'Type couleur non valide';
    RETURN 0;
END

    IF  @Type_son NOT LIKE '%[A-Za-z ‘’- . 0-9]%' OR @Type_son = ''
    BEGIN 
        PRINT 'Type son non valide';
    RETURN 0;
END


IF NOT EXISTS (SELECT * FROM Edition WHERE Nom=@Nom )
BEGIN
    INSERT INTO Edition
        (
        Nom,
        Annee_de_sortie,
        Duree_film,
        limite_age,
            Support,
            Date_insertion,
            Type_couleur,
            Type_son ,
            Supprimer,
            FK_titre ,
            FK_complement_titre
        )       

    VALUES 
    (
        @Nom,
        @Annee_de_sortie,
        @Duree_film,
        @limite_age,
        @Support,
            @Date_insertion,
            @Type_couleur,
            @Type_son ,
            0,
            @FK_titre ,
            @FK_complement_titre
    )


        PRINT 'Nouvelle édition ajoutée';
    END

    ELSE
    BEGIN
        PRINT 'L''édition existe déja';
    END
END
GO

/*L2 ATIC 2013 GROUPE ouf_tim                   */
/*BdD ouf_tim                                   */
/*Procedure de creation de relance_découvert   */
/*Auteur(s): LADURANTI Sandra                  */
/*testeur(s): PATRICK POL LADURANTI Sandra     */
/*Intégrateur: LADURANTI Sandra                */

IF OBJECT_ID ('dbo.Relance_decouvert_creer', 'P') IS NOT NULL
DROP PROCEDURE dbo.Relance_decouvert_creer ; 
GO
CREATE PROCEDURE dbo.Relance_decouvert_creer
(
    @Niveau_decouvert INT,
    @Date_creation DATETIME,
    @Date_mise_a_jour DATETIME,
    @FK_numero_compte INT
)

AS

BEGIN 

    IF @Niveau_decouvert < 0 OR @Niveau_decouvert > 3
    BEGIN 
        PRINT 'Le niveau de découvert n''est pas valide'; 
    RETURN 0; 
END


    IF @FK_numero_compte < 0 OR @FK_numero_compte = ''
    BEGIN 
        PRINT 'Le numéro de compte n''est pas valide >> voir compte';
    RETURN 0;
END 


IF NOT EXISTS (SELECT * FROM Relance_decouvert WHERE @FK_numero_compte = FK_numero_compte)
BEGIN

    INSERT INTO Relance_decouvert
        (
        Niveau_decouvert,
        Date_creation,
        Date_mise_a_jour,
        FK_numero_compte
        )       

        VALUES 
        (
            @Niveau_decouvert,
            @Date_creation,
            @Date_mise_a_jour,
            @FK_numero_compte
        )
        PRINT 'Nouvelle Relance Decouvert ajoutée'
    END

    ELSE
    BEGIN
        PRINT 'Cette Relance Decouvert existe déja';
    END

END
GO

/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Procedure de creation d'une attribution */
/*Auteur(s): PATRICK POL*/
/*Testeur(s): */
/*Intégrateur: */


IF OBJECT_ID('dbo.Attribuer_creer', 'P') IS NOT NULL
    DROP PROCEDURE dbo.Attribuer_creer;
GO 
CREATE PROCEDURE dbo.Attribuer_creer
(
    @FK_titre_film NVARCHAR (50),
    @FK_complement_titre NVARCHAR (50),
    @FK_nom_distinction NVARCHAR (50),
    @FK_lieu_distinction NVARCHAR (50),
    @FK_annee_distinction INT
)

AS

BEGIN


    INSERT INTO dbo.Attribuer
    ( 
		Supprimer,
        FK_titre_film,
        FK_complement_titre,
        FK_nom_distinction,
        FK_lieu_distinction,
        FK_annee_distinction 
    ) 
    VALUES 
    ( 
		0,
        @FK_titre_film,
        @FK_complement_titre,
        @FK_nom_distinction,
        @FK_lieu_distinction,
        @FK_annee_distinction
    )

    PRINT 'Attribuer Ajoute'

END 
GO

/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Procedure de creation d'un type d'abonnement */
/*Auteur(s): Tsvetkov Alexandre*/
/*Testeur(s): Laduranti Sandra */
/*Intégrateur: Laduranti Sandra*/

IF OBJECT_ID('dbo.Type_abonnement_creer', 'P') IS NOT NULL
    DROP PROCEDURE dbo.Type_abonnement_creer;
GO 
CREATE PROCEDURE dbo.Type_abonnement_creer
(
    @Nom NVARCHAR (50),
    @Prix MONEY,
    @Prix_location MONEY,
    @Exemplaires_simultanes INT,
    @Prix_retard MONEY,
    @Duree_engagement INT
)

AS

BEGIN

    IF @Nom LIKE '%[0-9/*%@(){}+&]%' OR @Nom LIKE '' AND @Nom  LIKE '%  %'
    BEGIN
        PRINT'Le nom du type d''abonnement est non valide';
        RETURN 0;
    END

    IF @Prix <= 0
    BEGIN
        PRINT'Le prix du type d''abonnement est non valide';
        RETURN 0;
    END

    IF @Prix_location <= 0 
    BEGIN
        PRINT'Le prix de la location non valide (proc : type_abonnement)';
        RETURN 0;
    END

    IF @Exemplaires_simultanes < 0 OR @Exemplaires_simultanes > 50 
    BEGIN
        PRINT'Le nombre exemplaires simultanes est non valide (proc : type_abonnement)';
        RETURN 0;
    END
    
    IF @Prix_retard < 0
    BEGIN
        PRINT'Le prix retard est non valide (proc : type_abonnement)';
        RETURN 0;
    END

    IF @Duree_engagement <= 0
    BEGIN
        PRINT'La duree engagement non est valide (proc : type_abonnement)';
        RETURN 0;
    END

IF NOT EXISTS (SELECT * FROM Type_abonnement WHERE Nom=@Nom)
BEGIN
    INSERT INTO Type_abonnement
    (
        Nom,
        Prix,
        Prix_location,
        Exemplaires_simultanes,
        Prix_retard,
        Duree_engagement
    )
    VALUES
    (
        @Nom,
        @Prix,
        @Prix_location,
        @Exemplaires_simultanes,
        @Prix_retard,
        @Duree_engagement
    )

    PRINT 'Nouveau Type_abonnement ajouté';
END

ELSE
BEGIN
    PRINT 'Ce type abonnement existe déjà';
END

END
GO


-----------------------------------------------
/* BdD : < Ouf'tim >                          */
/* Procédure de création d'un rattachement    */
/* Auteur : Elise BROCHEN                      */
/*testeur(s): PATRICK POL LADURANTI Sandra     */
/*Intégrateur: LADURANTI Sandra                */
-----------------------------------------------

IF OBJECT_ID ('rattacher_creer', 'P') IS NOT NULL
    DROP PROCEDURE  rattacher_creer;
GO
CREATE PROCEDURE rattacher_creer
(	
    @FK_langue NVARCHAR (50) ,
    @FK_edition INT 
)
AS

BEGIN 

    
IF NOT EXISTS ((SELECT * FROM Rattacher WHERE FK_langue = @FK_langue AND FK_edition = @FK_edition))
 BEGIN
    INSERT INTO Rattacher
            (
            Supprimer,
            FK_langue,
            FK_edition
            )
    
    VALUES
        (
        0,
        @FK_langue,
        @FK_edition
        )
    PRINT 'Nouveau rattachement ajouté'
 END

 ELSE
 BEGIN
    PRINT 'Ce rattachement existe déjà'
 END
END
GO

-----------------------------------------------
/* BdD : < Ouf'tim >                          */
/* Procédure de création d'un affichage       */
/* Auteur : Patrick POL                        */
/*testeur(s): PATRICK POL LADURANTI Sandra     */
/*Intégrateur: LADURANTI Sandra                */
-----------------------------------------------

IF OBJECT_ID ('afficher_creer', 'P') IS NOT NULL
    DROP PROCEDURE  afficher_creer;
GO
CREATE PROCEDURE afficher_creer
(
    @FK_langue NVARCHAR (50) ,
    @FK_edition INT 
)
AS

BEGIN 
    
IF NOT EXISTS ((SELECT * FROM Afficher WHERE FK_langue = @FK_langue AND FK_edition = @FK_edition))
 BEGIN
    INSERT INTO Afficher
            (
            Supprimer,
            FK_langue,
            FK_edition
            )
    
    VALUES
        (
        0,
        @FK_langue,
        @FK_edition
        )
    PRINT 'Nouvel affichage ajouté'
 END

 ELSE
 BEGIN
    PRINT 'Cet affichage existe déjà'
 END
END
GO


/*L2 ATIC 2013 GROUPE ouf_tim            */
/*BdD ouf_tim                    */
/*Procedure de creation de langue audio     */
/*Auteur(s): GOUALARD Mickael           */
/*testeur(s): GOUALARD Mickael          */
/*Intégrateur: LADURANTI Sandra             */

IF OBJECT_ID('dbo.Langue_audio_creer', 'P') IS NOT NULL
    DROP PROCEDURE Langue_audio_creer;
GO 
CREATE PROCEDURE Langue_audio_creer
(
    @Nom NVARCHAR (50)
)

AS

BEGIN
    
    IF @Nom LIKE '%[0-9/*%@(){}+&]%' OR @Nom LIKE '' OR @Nom LIKE '%  %'
    BEGIN
        PRINT 'Le nom de la langue n''est pas valide';
        RETURN 0;
    END

IF NOT EXISTS (SELECT * FROM Langue_audio WHERE Nom=@Nom)
BEGIN
    INSERT INTO Langue_audio
    (
        Nom 
    )

    VALUES
    (
        @Nom    
    )
    PRINT 'Nouveau langage audio ajouté';
END

ELSE
BEGIN
    PRINT 'Cette langue audio existe déjà';
END

END
GO


/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Charindex - Insertion film */
/*Auteur(s): PATRICK POL*/
/*Correcteur: BROCHEN Elise */
/*Testeur(s):  SANDRA LADURANTI ELISE BROCHEN */
/*Intégrateur: SANDRA LADURANTI*/

IF OBJECT_ID ('dbo.ajouter_film', 'P') IS NOT NULL
DROP PROCEDURE dbo.ajouter_film ; 
GO
CREATE procedure [dbo].[ajouter_film]
    /* catalogue */
    @Titre NVARCHAR(50),
    @Complement_titre NVARCHAR(50),
    @Annee INT,
    @Nationalite NVARCHAR (50),
    @Duree INT,
    
    
    
    
    /* acteur(s) */
    @liste_acteurs NVARCHAR(1000),
    -- |nom1,prenom1,date_naissance1,sexe1,date_deces1,nom_scene1,biographie1,nationalité1|nom2,prenom2,date_naissance2,sexe2,date_deces2,nom_scene2,biographie2,nationalité2|...
    -- 0 si film sans acteur

    /*
    @nom_act NVARCHAR(50), @pre_act NVARCHAR(50), @dat_naissance DATE, @sexe_act NVARCHAR(50),@date_deces DATE, @nom_scene NVARCHAR (50), @biographie NVARCHAR(max), @nat_act NVARCHAR(50)
    */
    
    /* realisateur(s) */
    @liste_realisateurs NVARCHAR(500),

   /* Distinction(s) */
    @liste_distinctions NVARCHAR(500),

    /*genre(s)*/
    @liste_genres NVARCHAR(100)
--|nom|
--pas de film sans genre

as

BEGIN
 
    DECLARE @index int
    DECLARE @fin int
    DECLARE @vide int
    DECLARE @er int
    
    /* catalogue */
    IF EXISTS (SELECT * FROM Films
    WHERE
        Films.Titre=@Titre 
        and Films.Complement_titre=@Complement_titre
    and Films.Annee_de_sortie=@Annee
    and Films.Nationalite=@Nationalite
    and Films.Duree=@Duree
    and Films.Supprimer=0
    
    )
    BEGIN
    print cast(@Titre as NVARCHAR)+','+cast(@Complement_titre as NVARCHAR)+','+cast(@Annee as NVARCHAR)+','+cast(@Nationalite as NVARCHAR)+','+cast(@Duree as NVARCHAR)+' film déjà au catalogue';
    return 0;
    END 

    ELSE /* Film absent au catalogue */
    BEGIN
    print cast(@Titre as NVARCHAR)+','+cast(@Complement_titre as NVARCHAR)+','+cast(@Annee as NVARCHAR)+','+cast(@Nationalite as NVARCHAR)+','+cast(@Duree as NVARCHAR)+' à insérer au catalogue';
    exec @er=Film_creer @Titre, @Complement_titre, @Annee, @Nationalite, @Duree;
    if @er <> 0 return 0
    END
    
    /* ACTEUR(S) */
    print '-- ACTEUR(S) --'
    -- |nom1,prenom1,date_naissance1,sexe1,date_deces1,nom_scene1,biographie1,nationalité1|nom2,prenom2,date_naissance2,sexe2,date_deces2,nom_scene2,biographie2,nationalité2|...
    -- 0 si film sans acteur
    SET @index=1
    SET @vide = 1
    IF CHARINDEX('|', @liste_acteurs)=0
        BEGIN
            print ' film sans acteur'
            SET @vide = 0
        END
    -- ajout cara | en debut
    IF CHARINDEX('|',@liste_acteurs) <> 1
        BEGIN
            SET @liste_acteurs = '|' + @liste_acteurs
        END
    -- ajout cara | en fin
    IF CHARINDEX('|',@liste_acteurs, len(@liste_acteurs)) = 0
        BEGIN
            SET @liste_acteurs = @liste_acteurs +'|'
        END

    while @index <> LEN(@liste_acteurs) AND @vide=1
        BEGIN
        DECLARE @avirg1 int, @avirg2 int,@avirg3 int,@avirg4 int,@avirg5 int, @avirg6 int, @avirg7 int
        DECLARE @nom_act NVARCHAR(50), @pre_act NVARCHAR(50), @date_naissance DATE, @sexe_act NVARCHAR(50),@date_deces DATE, @nom_scene NVARCHAR (50), @biographie NVARCHAR(max), @nat_act NVARCHAR(50)
        SET @avirg1 = CHARINDEX(',', @liste_acteurs, @index+1)
        SET @avirg2 = CHARINDEX(',', @liste_acteurs, @avirg1+1)
        SET @avirg3 = CHARINDEX(',', @liste_acteurs, @avirg2+1)
        SET @avirg4 = CHARINDEX(',', @liste_acteurs, @avirg3+1) 
        SET @avirg5 = CHARINDEX(',', @liste_acteurs, @avirg4+1) 
        SET @avirg6 = CHARINDEX(',', @liste_acteurs, @avirg5+1) 
        SET @avirg7 = CHARINDEX(',', @liste_acteurs, @avirg6+1)     

        SET @fin = CHARINDEX('|', @liste_acteurs, @index+1)
        
        SET @nom_act = LTRIM(SUBSTRING(@liste_acteurs, @index+1, @avirg1 - @index -1))
        SET @pre_act = LTRIM(SUBSTRING(@liste_acteurs, @avirg1+1, @avirg2 - @avirg1 -1))
        SET @date_naissance = LTRIM(SUBSTRING(@liste_acteurs, @avirg2+1, @avirg3 - @avirg2 -1))
        SET @sexe_act = LTRIM(SUBSTRING(@liste_acteurs, @avirg3+1, @avirg4 - @avirg3 -1))

        DECLARE @atmpdeces NVARCHAR(100)
        SET @atmpdeces = LTRIM(SUBSTRING(@liste_acteurs, @avirg4+1, @avirg5 - @avirg4 -1))
        IF (@atmpdeces='' OR @atmpdeces=' ' OR @atmpdeces='null' OR @atmpdeces = 'NULL')
         SET @date_deces = null
         ELSE
         SET @date_deces = @atmpdeces

        SET @nom_scene = LTRIM(SUBSTRING(@liste_acteurs, @avirg5+1, @avirg6 - @avirg5 -1))
        SET @biographie = LTRIM(SUBSTRING(@liste_acteurs, @avirg6+1, @avirg7 - @avirg6 -1))
        SET @nat_act = LTRIM(SUBSTRING(@liste_acteurs, @avirg7+1, @fin- @avirg7 -1))
        SET @index = @fin


        IF EXISTS(SELECT * FROM Acteur WHERE Acteur.Nom=@nom_act AND Acteur.Prenom=@pre_act AND Acteur.Date_naissance=@date_naissance AND Acteur.Sexe=@sexe_act AND Acteur.Date_deces=@date_deces AND Acteur.Nom_de_scene=@nom_scene AND Acteur.Biographie=@biographie AND Acteur.Nationalite=@nat_act)
        /*SI l''acteur existe dans la table Acteur ALORS*/
            BEGIN
            print 'l''acteur '+cast(@pre_act as NVARCHAR)+cast(@nom_act as NVARCHAR)+' existe déjà dans la table Acteur ; vérifier dans la table Jouer';

            IF EXISTS (SELECT * FROM Jouer WHERE Jouer.FK_nom_acteur=@nom_act AND Jouer.FK_prenom_acteur=@pre_act AND Jouer.FK_date_de_naissance_acteur=@date_naissance)
            /*SI l''acteur existe dans la table Joue ALORS*/
                BEGIN
                print cast(@Titre as NVARCHAR)+', '+cast(@nom_act as NVARCHAR)+'; existe déjà dans la table Jouer'
                END
            ELSE
                BEGIN
                print cast(@Titre as NVARCHAR)+', '+cast(@nom_act as NVARCHAR)+'; n''existe pas dans la table Jouer, insérer dans la table Joue'
                exec  Jouer_creer @Titre, @Complement_titre, @nom_act, @pre_act, @date_naissance;
                END
            END
        ELSE /* l'acteur n'existe pas dans la table Acteur, insérer dans la table Acteur et dans la table Joue  */
            BEGIN
            print cast(@nom_act as NVARCHAR)+' n''existe pas dans la table Acteurs, insérer dans la table Acteurs et dans la table Jouer'
            exec Acteur_creer @nom_act, @pre_act, @date_naissance, @sexe_act, @date_deces, @nom_scene, @biographie, @nat_act;
            exec Jouer_creer @Titre, @Complement_titre, @nom_act, @pre_act, @date_naissance;
            END
        END
    
END

print '--REALISATEUR(S)--';

  SET @index=1
  SET @vide=1

  IF CHARINDEX('|', @liste_realisateurs)<>1
     BEGIN
       SET @liste_realisateurs = '|' + @liste_realisateurs
     END
  IF CHARINDEX('|',@liste_realisateurs, len(@liste_realisateurs))=0
     BEGIN
       SET @liste_realisateurs = @liste_realisateurs+'|'
     END

while @index <> LEN(@liste_realisateurs) AND @vide=1
    BEGIN

    DECLARE @cvirg1 int, @cvirg2 int, @cvirg3 int, @cvirg4 int, @cvirg5 int, @cvirg6 int

    DECLARE @nom_rea NVARCHAR (50), @prenom_rea NVARCHAR (50), @date_naissance_rea DATE, @sexe_rea NVARCHAR (50), @date_deces_rea DATE, @biographie_rea NVARCHAR (MAX), @nationalite_rea NVARCHAR (50)

    SET @cvirg1 = CHARINDEX(',', @liste_realisateurs, @index+1)
    SET @cvirg2 = CHARINDEX(',', @liste_realisateurs, @cvirg1+1) 
    SET @cvirg3 = CHARINDEX(',', @liste_realisateurs, @cvirg2+1)
    SET @cvirg4 = CHARINDEX(',', @liste_realisateurs, @cvirg3+1)
    SET @cvirg5 = CHARINDEX(',', @liste_realisateurs, @cvirg4+1)   
    SET @cvirg6 = CHARINDEX(',', @liste_realisateurs, @cvirg5+1)

    
    SET @fin = CHARINDEX('|', @liste_realisateurs, @index+1)

    SET @nom_rea = LTRIM(SUBSTRING(@liste_realisateurs, @index+1, @cvirg1 - @index -1))
    SET @prenom_rea = LTRIM(SUBSTRING(@liste_realisateurs, @cvirg1+1, @cvirg2 - @cvirg1 -1))
    SET @date_naissance_rea = LTRIM(SUBSTRING(@liste_realisateurs, @cvirg2+1, @cvirg3 - @cvirg2 -1))
    SET @sexe_rea = LTRIM(SUBSTRING(@liste_realisateurs, @cvirg3+1, @cvirg4 - @cvirg3 -1))

    DECLARE @btmpDateDeces NVARCHAR(100)
    SET @btmpDateDeces = LTRIM(SUBSTRING(@liste_realisateurs, @cvirg4+1, @cvirg5 - @cvirg4 -1))
    IF (@btmpDateDeces='' OR @btmpDateDeces=' ' OR @btmpDateDeces='null' OR @btmpDateDeces='NULL')
       SET @date_deces_rea = null
    else SET @date_deces_rea = @btmpDateDeces
    
    SET @biographie_rea = LTRIM(SUBSTRING(@liste_acteurs, @cvirg5+1, @cvirg6 - @cvirg5 -1))

    SET @nationalite_rea = LTRIM(SUBSTRING(@liste_acteurs, @cvirg6+1, @fin- @cvirg6 -1))     

    SET @index = @fin


    
    IF EXISTS (SELECT * FROM Realisateur
     WHERE
     Realisateur.Nom=@nom_rea AND Realisateur.Prenom=@prenom_rea AND Realisateur.Date_naissance=@date_naissance_rea)
         BEGIN
          print 'le realisateur'+cast(@nom_rea as NVARCHAR)+'existe déjà dans realisateurs'
         IF EXISTS (SELECT * FROM Realiser
         WHERE Realiser.FK_nom_real = @nom_rea AND Realiser.FK_prenom_real = @prenom_rea AND Realiser.FK_date_naissance = @date_naissance_rea)
           BEGIN
            print 'le realisateur'+cast(@nom_rea as NVARCHAR)+'existe déjà dans realiser'
           END
        ELSE
          BEGIN
           print 'le realisateur'+cast(@nom_rea as NVARCHAR)+'n''existe pas dans realiser'
           exec Realiser_creer @Titre, @Complement_titre, @nom_rea, @prenom_rea, @date_naissance_rea;
          END
        END
    ELSE
       BEGIN
     /* Le realisateur n'existe pas on va donc l'ajouter dans la liste de nos realisateurs */
        print cast(@nom_rea as NVARCHAR)+'n''existe pas dans realisateur, inserer dans realisateur et dans realiser'
        exec Realisateur_creer @nom_rea, @prenom_rea, @date_naissance_rea, @sexe_rea, @date_deces_rea, @biographie_rea, @nationalite_rea;
        exec Realiser_creer @Titre, @Complement_titre, @nom_rea, @prenom_rea, @date_naissance_rea;
       END
    END

/* DISTINCTION(S) */

print '--Distinctions--';

    SET @index=1
    SET @vide = 1

  IF CHARINDEX('|', @liste_distinctions)=0
     BEGIN 
       print 'Film sans distinctions'
       SET @vide=0
     END

  IF CHARINDEX('|', @liste_distinctions)<>1
     BEGIN
       SET  @liste_distinctions = '|' +  @liste_distinctions
     END
  IF CHARINDEX('|', @liste_distinctions, len(@liste_distinctions))=0
     BEGIN
       SET  @liste_distinctions =  @liste_distinctions+'|'
     END

    while @index <> LEN(@liste_distinctions) AND @vide=1
        BEGIN
        DECLARE @bvirg1 int, @bvirg2 int
        DECLARE @Nom NVARCHAR(50), @Lieu NVARCHAR(50), @Annee_d INT  
        SET @bvirg1 = CHARINDEX(',', @liste_distinctions, @index+1)
        SET @bvirg2 = CHARINDEX(',', @liste_distinctions, @bvirg1+1)

        SET @fin = CHARINDEX('|', @liste_distinctions, @index+1)
        
        SET @Nom = LTRIM(SUBSTRING(@liste_distinctions, @index+1, @bvirg1 - @index -1))
        SET @Lieu = LTRIM(SUBSTRING(@liste_distinctions, @bvirg1+1, @bvirg2 - @bvirg1 -1))
        SET @Annee_d = LTRIM(SUBSTRING(@liste_distinctions, @bvirg2+1, @fin- @bvirg2 -1))
        
        
        SET @index = @fin
        
        IF EXISTS (select* from Distinctions  
            where Distinctions.Nom = @Nom and Distinctions.Lieu = @Lieu and Distinctions.Annee = @Annee_d)
            BEGIN
            print 'la distinction'+cast(@Nom as NVARCHAR)+' existe déjà dans la table Distinctions ; vérifier dans la table Attribuer';
 
        IF EXISTS (select* from Attribuer
            where Attribuer.FK_nom_distinction = @Nom and Attribuer.FK_lieu_distinction = @Lieu and Attribuer.FK_annee_distinction= @Annee_d )
            BEGIN
                print cast(@Nom as NVARCHAR)+', '+cast(@Lieu as NVARCHAR)+', '+cast(@Annee_d as INT)+'; existe déjà dans la table Attribuer'
                END
            ELSE
                BEGIN
                      print cast(@Nom as NVARCHAR)+', '+cast(@Lieu as NVARCHAR)+', '+cast(@Annee_d as NVARCHAR)+'; n''existe pas dans la table Attribuer, inserer dans la table Attribuer'
                END
                
            END
        ELSE /* La distinction n'existe pas dans la table Attribuer, insérer dans la table Distinctions et dans la table Attribuer  */
            BEGIN
            print cast(@nom_act as NVARCHAR)+' n''existe pas dans la table Acteurs, insérer dans la table Acteurs et dans la table Joue'
            exec Distinctions_creer @Nom, @Lieu, @Annee_d;
            exec Attribuer_creer @Titre, @Complement_titre, @Nom, @Lieu, @Annee_d;
            END
        END

        /*Genre*/
  print '--GENRE(S)--'
  SET @index=1
  SET @vide=1
  IF CHARINDEX('|', @liste_genres)<>1
     BEGIN
       SET @liste_genres = '|' + @liste_genres
     END
  IF CHARINDEX('|',@liste_genres, len(@liste_genres))=0
     BEGIN
       SET @liste_genres = @liste_genres+'|'
     END

while @index <>LEN(@liste_genres) AND @vide=1
    BEGIN
    DECLARE @nom_genre NVARCHAR(50)
    
    SET @fin = CHARINDEX('|', @liste_genres, @index+1)

    SET @nom_genre = LTRIM(SUBSTRING(@liste_genres, @index+1, @fin - @index -1))

    SET @index = @fin


    IF EXISTS (SELECT * FROM Genre
    WHERE
          Genre.Nom=@nom_genre)
      BEGIN
          print 'le genre'+cast(@nom_genre as NVARCHAR)+'existe déjà dans genres';
      IF EXISTS (SELECT * FROM Appartenir
      WHERE
           Appartenir.FK_titre=@Titre
           and Appartenir.FK_complement_titre=@Complement_titre
           and Appartenir.FK_nom_genre=@nom_genre)
           BEGIN
               print 'le genre'+cast(@Titre as NVARCHAR)+','+cast(@Complement_titre as NVARCHAR)+','+cast(@nom_genre as NVARCHAR)+'existe deja';
           END

       ELSE
               BEGIN
           print 'le genre'+cast(@Titre as NVARCHAR)+','+cast(@Complement_titre as NVARCHAR)+','+cast(@nom_genre as NVARCHAR)+'existe deja';
           exec Appartenir_creer @Titre, @Complement_titre, @nom_genre;
           END
       END
       
    ELSE
     /* Le genre n'existe pas on va donc l'ajouté dans la liste de nos genres */
     BEGIN
     print cast(@nom_genre as NVARCHAR)+'n''existe pas dans genre';
     exec Genre_creer @nom_genre;
     exec Appartenir_creer @Titre,@Complement_titre,@nom_genre;
     END
END
GO



/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Charindex - Insertion Edition */
/*Auteur(s): PATRICK POL ELISE BROCHEN*/
/*Testeur(s):  PATRICK POL SANDRA LADURANTI ELISE BROCHEN MICKAEL GOUALARD*/
/*Intégrateur: SANDRA LADURANTI*/


/*Charindex - Insertion Edition */
IF OBJECT_ID ('dbo.a_insertion_edition', 'P') IS NOT NULL
DROP PROCEDURE dbo.a_insertion_edition ; 
GO
CREATE procedure [dbo].[a_insertion_edition]
@FK_titre NVARCHAR (50),
@FK_complement_titre NVARCHAR(50),

@Nom NVARCHAR(50),
@Annee_de_sortie INT,
@Duree_film INT,
@limite_age INT,
@Support NVARCHAR (50),
@Dinsertion DATETIME,
@Tcouleur NVARCHAR (50),
@Tson NVARCHAR (50),
@liste_Langue_audio NVARCHAR (1000),
@liste_Langue_sous_titre NVARCHAR (1000)
/* Exemplaire aussi normalement */

AS

BEGIN 

    /*
    DEBUT: Preparation des chaines d'arguments
    */

    /* DEBUT: Preparation de la chaine de NVARCHAR de Langue_Audio (@liste_Langue_audio)*/
    DECLARE @LAindex INT
    DECLARE @LAfin INT
    DECLARE @LAvide INT

    SET @LAindex=1
    SET @LAvide=1

    IF CHARINDEX('|', @liste_Langue_audio)=0
    BEGIN
        SET @LAvide= 0
    END
    -- ajout cara | en debut
    IF CHARINDEX('|',@liste_Langue_audio) <> 1
    BEGIN
        SET @liste_Langue_audio = '|' + @liste_Langue_audio
    END

    -- ajout cara | en fin
    IF CHARINDEX('|',@liste_Langue_audio, len(@liste_Langue_audio)) = 0
    BEGIN
        SET @liste_Langue_audio = @liste_Langue_audio +'|'
    END
    /* FIN: Preparation de la chaine de NVARCHAR de Langue_Audio (@liste_Langue_audio) */

    /* DEBUT: Preparation de la chaine de NVARCHAR de Langue_Sous_titre (@liste_Langue_sous_titre)*/
    DECLARE @LSindex INT
    DECLARE @LSfin INT
    DECLARE @LSvide INT

    SET @LSindex=1
    SET @LSvide=1

    IF CHARINDEX('|', @liste_Langue_sous_titre)=0
    BEGIN
        SET @LSvide = 0
    END
    -- ajout cara | en debut
    IF CHARINDEX('|',@liste_Langue_sous_titre) <> 1
    BEGIN
        SET @liste_Langue_sous_titre = '|' + @liste_Langue_sous_titre
    END

    -- ajout cara | en fin
    IF CHARINDEX('|',@liste_Langue_sous_titre, len(@liste_Langue_sous_titre)) = 0
    BEGIN
        SET @liste_Langue_sous_titre = @liste_Langue_sous_titre +'|'
    END
    /* FIN: Preparation de la chaine de NVARCHAR de Langue_Sous_titre (@liste_Langue_sous_titre) */

    /*
    DEBUT: Preparation des chaines d'arguments
    */

/* Catalogue - On vérifie l'existance du film*/

IF EXISTS (select * FROM Films
 where
   Films.Titre=@FK_titre
   and Films.Complement_titre=@FK_complement_titre
    )

BEGIN
print cast(@FK_titre as NVARCHAR)+','+cast(@FK_complement_titre as NVARCHAR)+'existe déja';
END

ELSE
BEGIN
print 'Insere d''abord ce film'+cast(@FK_titre as NVARCHAR)+','+cast(@FK_complement_titre as NVARCHAR);
RETURN;
END

/*Edition --> On vérifie l'existence des éléments */

IF EXISTS (select * from Edition
  where
    Edition.Nom=@Nom AND
    Edition.Annee_de_sortie=@Annee_de_sortie AND
    Edition.limite_age=@limite_age AND
    Edition.Support=@Support AND
    Edition.Date_insertion=@Dinsertion AND
    Edition.Type_couleur=@Tcouleur AND
    Edition.Type_son=@Tson
    )
BEGIN
     print cast(@Nom as NVARCHAR)+','+cast(@Annee_de_sortie as NVARCHAR)+','+cast(@limite_age as NVARCHAR)+','+cast(@Support as NVARCHAR)+','+cast(@Dinsertion as NVARCHAR)+','+cast(@Tcouleur as NVARCHAR)+','+cast(@Tson as NVARCHAR)+'existe déjà';
     RETURN;
END

ELSE
BEGIN
    print cast(@Nom as NVARCHAR)+','+cast(@Annee_de_sortie as NVARCHAR)+','+cast(@limite_age as NVARCHAR)+','+cast(@Support as NVARCHAR)+','+cast(@Dinsertion as NVARCHAR)+','+cast(@Tcouleur as NVARCHAR)+','+cast(@Tson as NVARCHAR)+'à insérer';
	EXEC Edition_creer @Nom, @Annee_de_sortie, @Duree_film, @limite_age, @Support, @Dinsertion, @Tcouleur, @Tson, @FK_titre, @FK_complement_titre;
END

/* Langue Audio */

    BEGIN
        while @LAindex <> LEN(@liste_Langue_audio) AND @LAvide=1
        BEGIN
            DECLARE @Nom_Langue_Audio NVARCHAR(50)

            SET @LAfin = CHARINDEX('|',@liste_Langue_audio, @LAindex+1)

            SET @Nom_Langue_Audio = LTRIM(SUBSTRING(@liste_Langue_audio, @LAindex+1, @LAfin - @LAindex -1))

            SET @LAindex = @LAfin

            BEGIN
                EXEC Langue_audio_creer
                    @Nom_Langue_Audio
            END

            DECLARE @LANumero_edition INT
            SET @LANumero_edition = (SELECT Numero_edition FROM dbo.Edition WHERE Support=@Support AND Duree_film=@Duree_film AND Type_couleur=@Tcouleur AND Type_son=@Tson AND limite_age=@limite_age AND Annee_de_sortie=@Annee_de_sortie AND FK_titre=@FK_titre AND FK_complement_titre=@FK_complement_titre)
            
            IF @LANumero_edition IS NULL
            BEGIN
                PRINT 'ERROR - Edition : Edition correspondante introuvable'
                RETURN;
            END

            ELSE

            INSERT INTO dbo.Rattacher
            (
				Supprimer,
                FK_langue,
                FK_edition
            )
            VALUES
            (
				0,
                @Nom_Langue_Audio,
                @LANumero_edition    
            )
        END
    


/*Langue Sous-titre */

        while @LSindex <> LEN(@liste_Langue_sous_titre) AND @LSvide=1
        BEGIN
            DECLARE @Nom_Langue_sous_titre NVARCHAR(50)

            SET @LSfin = CHARINDEX('|',@liste_Langue_sous_titre, @LSindex+1)

            SET @Nom_Langue_sous_titre = LTRIM(SUBSTRING(@liste_Langue_sous_titre, @LSindex+1, @LSfin - @LSindex -1))

            SET @LSindex = @LSfin

            BEGIN
                EXEC Langue_sous_titre_creer
                    @Nom_Langue_sous_titre
            END

            DECLARE @LSNumero_edition INT
            SET @LSNumero_edition = (SELECT Numero_edition FROM dbo.Edition WHERE Support=@Support AND Duree_film=@Duree_film AND Type_couleur=@Tcouleur AND Type_son=@Tson AND limite_age=@limite_age AND Annee_de_sortie=@Annee_de_sortie AND FK_titre=@FK_titre AND FK_complement_titre=@FK_complement_titre)
            
            IF @LSNumero_edition IS NULL
            BEGIN
                PRINT 'ERROR - Edition : Edition correspondante introuvable'
                RETURN;
            END

            ELSE

            INSERT INTO dbo.Afficher
            (
				Supprimer,
                FK_langue,
                FK_edition
            )
            VALUES
            (
				0,
                @Nom_Langue_sous_titre,
                @LSNumero_edition
            )
        END
    END
END
GO


/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Charindex - Insertion Exemplaire */
/*Auteur(s): PATRICK POL*/
/*Correcteur: BROCHEN Elise */
/*Testeur(s): ELISE BROCHEN */
/*Intégrateur: SANDRA LADURANTI*/

IF OBJECT_ID ('dbo.insere_exemplaire', 'P') IS NOT NULL
DROP PROCEDURE dbo.insere_exemplaire ; 
GO
CREATE procedure [dbo].[insere_exemplaire]

@numSerieEdition int,
@nombreEx int,

@NomE NVARCHAR (50),
@AnneeE INT,
@Duree INT,
@limiteA INT,
@SupportE NVARCHAR (50),
@Dinsertion DATETIME,
@Tcouleur NVARCHAR (50),
@Tson NVARCHAR (50),

@Date_approvisionnement DATETIME,
@Taux_usure INT,
@Disponibilite BIT,
@Reserve INT,
@Supprimer INT,
@FK_numero_edition INT
as

begin

/* Tester si @numSerieEdition dans domaine */
/* Tester si @numSerieEdition correspond a edition existante */
IF  @numSerieEdition NOT LIKE '%[0-9]%'
    BEGIN 
        PRINT 'Le numero d''edition est pas valide';
    RETURN 0;
        END 

IF EXISTS (select * from Edition
  where
    Edition.Nom=@NomE AND
    Edition.Annee_de_sortie=@AnneeE AND
    Edition.Duree_film=@Duree AND
    Edition.limite_age=@limiteA AND
    Edition.Support=@SupportE AND
    Edition.Date_insertion=@Dinsertion AND
    Edition.Type_couleur=@Tcouleur AND
    Edition.Type_son=@Tson
    )
begin
     print  cast(@NomE as NVARCHAR)+','+cast(@AnneeE as NVARCHAR)+','+cast(@Duree as INT)+','+cast(@limiteA as INT)+','+cast(@SupportE as NVARCHAR)+','+cast(@Dinsertion as DATETIME)+','+cast(@Tcouleur as NVARCHAR)+','+cast(@Tson as NVARCHAR)+'existe déjà';
return 0;
end
   
/* Tester si @nombreEx dans domaine */

IF  @nombreEx NOT LIKE '%[0-9]%'
    BEGIN 
        PRINT 'Le nombre d''exemplaire n''est pas valide';
    RETURN 0;
END 

declare @counter int;
set @counter = 1;

while @counter <= @nombreEx
    begin
        insert into EXEMPLAIRES
        (
            Date_approvisionnement ,
            Taux_usure ,
            Disponibilite ,
			Reserve ,
			Supprimer,
            FK_numero_edition
        ) 
        values
        (
            @Date_approvisionnement ,
            @Taux_usure ,
            @Disponibilite ,
			@Reserve ,
			0,
            @FK_numero_edition
        )
        set @counter = @counter +1;
          END
END
GO

/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Charindex - Insertion abonne */
/*Auteur(s): PATRICK POL*/
/*Testeur(s):  PATRICK POL SANDRA LADURANTI ELISE BROCHEN MICKAEL GOUALARD*/
/*Intégrateur: SANDRA LADURANTI*/


/* CORRECTION CHARINDEX */

IF OBJECT_ID ('dbo.a_insertion_Abonne', 'P') IS NOT NULL
DROP PROCEDURE dbo.a_insertion_Abonne ; 
GO
CREATE procedure [dbo].[a_insertion_Abonne]

    @Nom NVARCHAR (50),
    @Prenom NVARCHAR (50),
    @Pseudo NVARCHAR (50),
    @Date_naissance DATE,
    @Sexe NVARCHAR (50),
    @Numero_de_voie NVARCHAR (50),
    @Complement_de_voie NVARCHAR (50),
    @Type_de_voie NVARCHAR (50),
    @Libelle NVARCHAR (50),
    @Complement_libelle NVARCHAR (50),
    @Code_postal NVARCHAR (50),
    @Ville NVARCHAR (50),
    @Cedex NVARCHAR (50),
    @Pays NVARCHAR (50),
    @Numero_telephone NVARCHAR (50),
    @Adresse_email NVARCHAR (50),
    
    /* Type_abonnement */
    
    @Type_abonnement NVARCHAR(50)  

as

begin

    declare @tmp int
    declare @index int
    declare @fin int
    declare @er INT
    declare @num_compte INT
    declare @Date_crea DATETIME

/* test type_abonnement */
IF NOT EXISTS (
    SELECT *
    FROM Type_abonnement WHERE  Type_abonnement.Nom=@Type_abonnement )
    BEGIN
        PRINT'Le type d`abonnement n`existe pas';
        RETURN 0;
END
 
ELSE /* le type_abonnnemnt exist déjà */
    BEGIN
        /* ABONNEE */
        print '-- ABONNEE --'
        exec @er = Abonne_creer @Nom, @Prenom, @Date_naissance;
        IF @er= 1 /* Abonne déjà au catalogue */
            BEGIN
                print cast(@Nom as NVARCHAR)+', '+cast(@Prenom as NVARCHAR)+'existe déjà';
                return 0;
            END

        ELSE /* Abonnee absent du catalogue */
            BEGIN
            print cast(@Nom as NVARCHAR)+', '+cast(@Prenom as NVARCHAR)+',  Abonnee absent du catalogue, à insérer';
                
                /* creation de compte*/
                exec  compte_creer @er , 0  ;
                set @num_compte=@@IDENTITY 
                
                /* creation de l''abonnement */
                set @Date_crea = getdate()
                declare @Dfin DATE
                set @Dfin= CURRENT_TIMESTAMP+30

                exec @er = abonnement_creer Date_crea,Dfin,@num_compte,@Type_abonnement ;
            /**/
            END
    END
  END
  GO

/*L2 ATIC 2013 GROUPE ouf_tim */
/*BdD ouf_tim */
/*Charindex - Insertion type abonnement */
/*Auteur(s): PATRICK POL*/
/*Testeur(s):  PATRICK POL SANDRA LADURANTI ELISE BROCHEN MICKAEL GOUALARD*/
/*Intégrateur: SANDRA LADURANTI*/

IF OBJECT_ID ('dbo.a_insertion_type_abonnement', 'P') IS NOT NULL
DROP PROCEDURE dbo.a_insertion_type_abonnement ; 
GO
Create procedure [dbo].[a_insertion_type_abonnement]
@Nom NVARCHAR (50),
@Prix MONEY,
@Prix_location MONEY,
@NbSimuls INT,
@Prix_retard MONEY,
@Duree INT

as

begin

    declare @index int
    declare @fin int
    declare @vide int
    declare @er int
    
    /* catalogue */
    IF EXISTS (SELECT * FROM Type_Abonnement
    WHERE
         Type_Abonnement.Nom=@Nom and
         Type_Abonnement.Prix=@Prix and
         Type_Abonnement.Prix_location=@Prix_location and
         Type_Abonnement.Exemplaires_simultanes=@NbSimuls and
             Type_Abonnement.Prix_retard=@Prix_retard and
             Type_Abonnement.Duree_engagement=@Duree
    )
    begin
    print cast(@Nom as NVARCHAR)+'exite deja';
    return 0;
    end

    ELSE /* Film absent au catalogue */
    begin
    print cast(@Nom as NVARCHAR)+'à insérer au type abonnement';
    exec @er=Type_abonnement_creer @Nom, @Prix, @Prix_location, @NbSimuls, @Prix_retard, @Duree;
    if @er <> 0 return 0
    end

END 
GO

/*L2 ATIC 2013 GROUPE ouf_tim											   */
/*BdD ouf_tim															   */
/*Charindex - Insertion location										   */
/*Auteur(s): ELISE BROCHEN												   */
/*Testeur(s):  PATRICK POL SANDRA LADURANTI ELISE BROCHEN Mickael GOUALARD */
/*Intégrateur: SANDRA LADURANTI											   */

IF OBJECT_ID ('dbo.insere_location', 'P') IS NOT NULL
DROP PROCEDURE dbo.insere_location ; 
GO
CREATE procedure [dbo].[insere_location]
@Num_exem INT,
@Num_abo INT

AS

BEGIN
    DECLARE @Date_deb DATETIME, @Duree INT, @Error INT, @TaboNom NVARCHAR (128 ), @NbSimul INT, @Date_fin DATETIME

    IF @Num_exem NOT LIKE (Select Numero_exemplaire FROM Exemplaires WHERE Numero_exemplaire = @Num_exem)
    BEGIN
        PRINT 'Num exemplaire invalide'
        RETURN;
    END

    IF @Num_abo NOT LIKE (SELECT Numero_abonnement FROM Abonnement WHERE Numero_abonnement = @Num_abo)
    BEGIN
        PRINT 'Num abonnement invalide'
        RETURN;
    END

    
    SET @Date_deb= CURRENT_TIMESTAMP

    SET @TaboNom = (SELECT FK_type_abonnement FROM dbo.Abonnement WHERE Abonnement.Numero_abonnement = @Num_abo)
    IF @TaboNom IS NULL
    BEGIN
        PRINT 'Abonnement invalide'
        RETURN;
    END

    SET @Duree = (SELECT Exemplaires_simultanes FROM dbo.Type_abonnement WHERE Type_abonnement.Nom = @TaboNom)
    IF @Duree IS NULL
    BEGIN
        PRINT 'Duree d''abonnement invalide'
        RETURN;
    END

    IF (SELECT Disponibilite FROM dbo.Exemplaires WHERE  Exemplaires.Numero_exemplaire = @Num_exem) <> 1
    BEGIN
        PRINT 'Exemplaires non dispo'
        RETURN;
    END

    SET @NbSimul = (SELECT Exemplaires_simultanes FROM dbo.Type_abonnement WHERE Type_abonnement.Nom = @TaboNom)
    IF (SELECT COUNT(*) FROM dbo.Locations WHERE Locations.FK_num_abonnement = @Num_exem) >= @NbSimul
    BEGIN
        PRINT 'Trop de locations' 
        RETURN;
    END

	SET @Date_fin= DATEADD(SECOND,1,CURRENT_TIMESTAMP)

    BEGIN
        INSERT INTO dbo.Locations
            (
            Date_debut,
            Duree, 
            Date_fin_prevue,
            Date_fin_reelle,
            FK_exemplaire,
            FK_num_abonnement
            )

            VALUES
            (
            @Date_deb,
            @Duree, 
            @Date_fin,
            NULL,
            @Num_exem,
            @Num_abo
            )

            UPDATE dbo.Exemplaires SET Disponibilite= 0 WHERE Exemplaires.FK_numero_edition = @Num_exem ;
        PRINT 'Nouvel location ajoutée'

    END

END
GO

/*L2 ATIC 2013 GROUPE ouf_tim											   */
/*BdD ouf_tim															   */
/*Charindex - Insertion Abonnement										   */
/*Auteur(s): PATRICK POL												   */
/*Testeur(s):  PATRICK POL SANDRA LADURANTI ELISE BROCHEN MICKAEL GOUALARD */
/*Intégrateur: SANDRA LADURANTI											   */

/*Charindex - Insertion Abonnement */

IF OBJECT_ID ('dbo.a_insertion_abonnement', 'P') IS NOT NULL
DROP PROCEDURE dbo.a_insertion_abonnement ; 
GO
CREATE procedure [dbo].[a_insertion_abonnement]

/* On dresse la liste des abonnes qui ont le meme abonnement */

@Nom_Abonne NVARCHAR (50),
@Prenom_Abonne NVARCHAR (50),
@Pseudo_Abonne NVARCHAR (50),
@Num_compte INT,
@TAbonnement NVARCHAR (50)

AS
BEGIN

declare @Date_expiration DATE
declare @Date_creation Date
SET  @Date_creation = CURRENT_TIMESTAMP+1;
SET  @Date_expiration = CURRENT_TIMESTAMP+20;

IF NOT EXISTS (SELECT * FROM Abonne where Abonne.Nom=@Nom_Abonne and Abonne.Prenom=@Prenom_abonne and Abonne.Pseudo=@Pseudo_abonne)
   BEGIN
      print cast(@Nom_Abonne as NVARCHAR)+cast(@Prenom_Abonne as NVARCHAR)+cast(@Pseudo_Abonne as NVARCHAR)+'n''existe pas'
      return 0;

   IF NOT EXISTS (SELECT * FROM Type_Abonnement where Type_Abonnement.Nom=@TAbonnement)
      BEGIN
    print cast(@TAbonnement as NVARCHAR)+'Type Abonnement non existant'
      END

   ELSE
      BEGIN
    IF NOT EXISTS (SELECT * FROM Compte WHERE Compte.Numero_compte=@Num_compte)
       BEGIN
             print 'Votre compte n''existe pas'
         return 0;
           END
        ELSE
        BEGIN
           EXEC Abonnement_creer @Num_compte,  @Date_creation, @Date_expiration, @TAbonnement
           EXEC Souscrire_creer  @Nom_Abonne, @Prenom_Abonne, @Pseudo_Abonne, @Num_compte
            END
      END

   END

END
GO


/*L2 ATIC 2013 GROUPE ouf_tim					  */
/*BdD ouf_tim									  */
/*Procedure avec curseur pour trouver une edition */
/*Auteur(s): LADURANTI Sandra BROCHEN Elise       */
/*Testeur(s): LADURANTI Sandra BROCHEN Elise	  */
/*Intégrateur: LADURANTI Sandra					  */

if object_id('[dbo].[C_trouver_edition]') is not null
drop procedure [dbo].[C_trouver_edition]
GO
CREATE procedure [dbo].[C_trouver_edition]
(
            @c_titre NVARCHAR (50),
            @c_complement_titre nvarchar (50),
            @c_support nvarchar (50),
            @c_langue nvarchar (50),
            @c_langue_sub nvarchar (50)
)

AS 

    declare @num_exemplaire int;
    declare @num_edition int;
    declare @Titre nvarchar;
    declare @Complement_titre nvarchar;
    declare @Annee_de_sortie date;
    declare @Support nvarchar;
    declare @dispo bit;
    declare @langue nvarchar;
    declare @langue_sub nvarchar;
    declare @fetch_edition int;

    set @dispo = 0;


    BEGIN 

    select Rattacher.FK_edition From Rattacher WHERE FK_langue = @langue;
     declare @cursor_langue_audio int;
     declare @cursor_langue_sub int;
	 declare @NULL int, @NLLU nvarchar(50), @NLULU datetime

        declare crs2 cursor local for
        select *
        from [dbo].[Edition] ed
        where ed.FK_titre = @c_titre and ed.FK_complement_titre = @c_complement_titre and ed.Support = @c_support 

            OPEN crs2
        
        FETCH Next from crs2
        INTO @fetch_edition,@NLLU,@NULL,@NULL,@NULL,@Support,@NLULU,@NLLU,@NLLU,@Titre, @Complement_titre /*@langue, @langue_sub,*/
        print 'fetch initial' ;
                IF @@FETCH_STATUS = - 1
                BEGIN
                    PRINT ' @@FETCH_STATUS = - 1 : aucun élément trouvé';
                    close crs2
                    deallocate crs2     
                    RETURN - 1;
                END
        WHILE @@FETCH_STATUS = 0
        BEGIN
            print 'fetch du while';
            set @cursor_langue_audio = NULL;
            set @cursor_langue_sub = NULL;
            select @cursor_langue_audio = FK_edition From Rattacher WHERE FK_langue = @c_langue;
            select @cursor_langue_sub = FK_edition From Afficher WHERE FK_langue = @c_langue_sub;
            
            IF @cursor_langue_audio is not null AND @cursor_langue_sub is not null
            begin
                print 'Titre: '+cast(@c_titre as NVARCHAR)+ ' complement: '+ cast(@c_complement_titre as NVARCHAR)+ ' Support: '+cast(@c_support as NVARCHAR)+ ' numero edition: ' + cast(@fetch_edition as NVARCHAR);
            end
        
            FETCH Next from crs2
             INTO @fetch_edition,@NLLU,@NULL,@NULL,@NULL,@Support,@NLULU,@NLLU,@NLLU,@Titre, @Complement_titre 
        END
        
        close crs2
        deallocate crs2

        return 1;
    END
GO

/*L2 ATIC 2013 GROUPE ouf_tim						   */
/*BdD ouf_tim										   */
/*Procedure de recherche d'edition					   */
/*Auteur(s): PATRICK POL LADURANTI SANDRA BROCHEN ELISE*/
/*Testeur(s): SANDRA LADURANTI BROCHEN ELISE		   */
/*Intégrateur: LADURANTI SANDRA						   */

IF OBJECT_ID ('dbo.recherche_edition', 'P') IS NOT NULL
DROP PROCEDURE dbo.recherche_edition ; 
GO 
CREATE procedure [dbo].[recherche_edition]
(
/* Numero Abo */

@Num_abonnement INT,

/* Catalogue */

@Titre NVARCHAR (50),
@Complement_titre NVARCHAR (50),


/* Edition */

@Support NVARCHAR (50),

/* Audio */
@Langue_audio NVARCHAR (50),

/* Sous-titre */
@Langue_sub NVARCHAR (50)
)

AS

BEGIN

/* Numero Abo */
print 'numero abonnement'+cast(@Num_abonnement as NVARCHAR)



/* Catalogue */

IF EXISTS (select * FROM Films 
 where 
   Films.Titre=@Titre 
   AND Films.Complement_titre=@Complement_titre 
    ) 
 
   begin 
   print cast(@Titre as VARCHAR)+','+cast(@Complement_titre as varchar)+'film existant'; 
   end

/* Edition */

IF EXISTS (select * FROM Edition WHERE Edition.Support=@Support)
begin 
     print cast(@Support as VARCHAR); 
end

ELSE
begin 
    print cast(@Support as VARCHAR)+'Edition recherche non existante';
    return;
END

/* Audio */

   IF EXISTS (SELECT * FROM Rattacher
   WHERE Rattacher.FK_langue=@Langue_audio)
   begin
	 print 'Cette langue audio'+cast(@Langue_audio as varchar)+'existe déjà dans rattacher';
   end

   ELSE
   begin
      print 'Cette langue audio'+cast(@Langue_audio as varchar)+'n''existe pas';
      return;
   END

/* Sous-titre */

   IF EXISTS (SELECT * FROM Afficher
   WHERE Afficher.FK_langue=@Langue_sub)
            begin
            print 'Cette langue sous-titre'+cast(@Langue_sub as varchar)+'existe déjà dans rattacher';
            end

        ELSE
          begin
          print 'Cette langue sous titre'+cast(@Langue_sub as varchar)+'n''existe pas';
          return;
         END

     /* pas oublier de gerer si il n'y a pas de sous titres et pour les complements de titre */
     EXEC C_trouver_edition @Titre, @Complement_titre, @Support, @Langue_audio, @Langue_sub;
END
GO

/*L2 ATIC 2013 GROUPE ouf_tim						 */
/*BdD ouf_tim										*/
/*Procedure de creation d'une reservation immédiate */
/*Auteur(s): LADURANTI SANDRA BROCHEN ELISE			*/
/*Testeur(s): LADURANTI SANDRA BROCHEN ELISE		*/
/*Correcteur: GOUALARD Mickael						*/
/*Intégrateur: LADURANTI SANDRA						*/

IF OBJECT_ID('dbo.Reservation_immediate_creer', 'P') IS NOT NULL
    DROP PROCEDURE dbo.Reservation_immediate_creer;
GO 
CREATE PROCEDURE dbo.Reservation_immediate_creer
(
    @num_abonnement INT,
    @num_edition INT
)

AS

BEGIN
	
DECLARE @nom_abonnement NVARCHAR (50),
		@nb_locations_sim INT,
		@nom_abonne NVARCHAR (50),
		@num_exemplaire INT,
		@HD_creation DATETIME,
		@HD_butoir DATETIME

		
set @nb_locations_sim = NULL
set @nom_abonnement = NULL

IF @num_abonnement NOT LIKE (SELECT Numero_abonnement FROM Abonnement WHERE Numero_abonnement=@num_abonnement)
	BEGIN
		PRINT 'Le numero d''abonnement n''existe pas'
		return;
	END


select @nom_abonnement = FK_type_abonnement FROM Abonnement where  Numero_abonnement = @num_abonnement

IF @nom_abonnement IS NULL
	begin
       PRINT 'mauvais nom abonnement'
       return;
	end

select @nb_locations_sim = Exemplaires_simultanes FROM Type_abonnement WHERE @nom_abonnement = Nom

IF (select count (*) FROM Locations WHERE FK_num_abonnement = @num_abonnement) >= @nb_locations_sim
  begin
	PRINT 'nombre locations max atteint'
	return;
  end

  SELECT TOP 1 @num_exemplaire = Numero_exemplaire  FROM Exemplaires WHERE @num_edition = FK_numero_edition AND Disponibilite = 1 AND Reserve = 1
  IF @num_exemplaire IS NULL
  begin
    PRINT 'Aucun exemplaire de dispo'
    return;
  end


  SET @HD_creation = CURRENT_TIMESTAMP
  set @HD_butoir = DATEADD(HH, 2, @HD_creation)
	
  BEGIN 
    INSERT INTO Reservation_immediate
        ( 
        HD_creation,
        HD_butoir,
        Etat,
        FK_num_abonnement ,
        FK_num_exemplaire
        )        
 
    VALUES  
    (
		@HD_creation,
        @HD_butoir,
        'En cours',
        @num_abonnement,
        @num_exemplaire
        )
  END
 
 UPDATE Exemplaires SET Disponibilite = 0 WHERE Numero_exemplaire = @num_exemplaire
 UPDATE Exemplaires SET Reserve = 1 WHERE Numero_exemplaire = @num_exemplaire
      PRINT 'Reservation créée'
END
GO
	
/*L2 ATIC 2013 GROUPE ouf_tim					   */
/*BdD ouf_tim									   */
/*Procedure de tache de fond reservation immediate */
/*Auteur(s): PATRICK POL MICKAEL GOUALARD		   */
/*Testeur(s): LADURANTI SANDRA BROCHEN ELISE	   */
/*Correcteur: PATRICK POL						   */
/*Intégrateur: LADURANTI SANDRA					   */

IF OBJECT_ID('[dbo].[a_maj_reservation_imm]', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[a_maj_reservation_imm];
GO
CREATE procedure [dbo].[a_maj_reservation_imm]
 /*reservation*/
AS
begin

 /* declaree */
 DECLARE @numero_reserv int
 DECLARE @num_exem int
 DECLARE @date_debut DATETIME
 DECLARE @Num_abo INT
 
 DECLARE cur_num_reservation CURSOR LOCAL FOR
  SELECT Numero_reservation FROM dbo.Reservation_immediate
	WHERE HD_butoir < CURRENT_TIMESTAMP AND Etat='En cours'
 
 
 OPEN cur_num_reservation;
	FETCH NEXT FROM cur_num_reservation INTO @numero_reserv;
	IF @@FETCH_STATUS =-1
	BEGIN
		PRINT 'AUCUNE RESERVATION SUPPRIMER'
		RETURN 0;
	END
	ELSE
 
 
	while(@@FETCH_STATUS = 0)
	BEGIN
	
	SET @Num_abo = (SELECT FK_num_abonnement FROM Reservation_immediate WHERE Numero_reservation = @numero_reserv)
 
	SET @num_exem =( SELECT FK_num_exemplaire FROM Reservation_immediate WHERE Numero_reservation = @numero_reserv)
	
	

	SET @date_debut = CURRENT_TIMESTAMP
	INSERT INTO annulation_reservation_imm (
	HD_annulation,
	FK_num_reservation,
	FK_num_abonnement
	
	 

	)
	VALUES
	(
	@date_debut,
	@numero_reserv,
	@Num_abo
	)
	UPDATE Reservation_immediate SET Etat = 'Annule' WHERE Numero_reservation = @numero_reserv ;
	UPDATE Exemplaires SET Disponibilite = 1 WHERE Numero_exemplaire = @num_exem;
	UPDATE Exemplaires SET Reserve = 0 WHERE Numero_exemplaire = @num_exem;
 PRINT @numero_reserv;
 PRINT 'la reservation est annule par la tache de fond'
 FETCH NEXT FROM cur_num_reservation INTO @numero_reserv; 
 END

 
 CLOSE cur_num_reservation;
 DEALLOCATE cur_num_reservation;
 PRINT 'FIN DE LA TACHE DE FOND MAJ ANNULATION'
 RETURN 1;
END
GO

/*L2 ATIC 2013 GROUPE ouf_tim					*/
/*BdD ouf_tim									*/
/*Procedure annulation de reservation immédiate */
/*Auteur(s): PATRICK POL						*/
/*Testeur(s): Mickael GOUALARD					*/
/*Correcteur: Mickael GOUALARD                  */
/*Intégrateur: LADURANTI SANDRA					*/

IF OBJECT_ID ('annulation_reservation_imm_creer', 'P') IS NOT NULL
DROP PROCEDURE annulation_reservation_imm_creer;
GO
CREATE PROCEDURE annulation_reservation_imm_creer(
	@HD_annulation DATETIME,
	@FK_num_reservation INT,
	@FK_num_abonnement INT
	)

	AS
	BEGIN
-- On verifie que l'annulation est faite avant 16h vu que à 16h son état passe à annule ou accomplie 
-- En gros on verifie que son etat est toujours à en cours

		IF @HD_annulation> (SELECT HD_Butoir FROM Reservation_immediate WHERE @FK_num_reservation=Numero_reservation) 
		 BEGIN
			PRINT 'Delais d''annulation depasse'
			Return;
		 END
 
		IF @FK_num_reservation NOT LIKE (SELECT Numero_reservation FROM Reservation_immediate WHERE Numero_reservation=@FK_num_reservation)
		 BEGIN
			PRINT 'Numero de reservation incorrect'
			RETURN;
		 END

		IF @FK_num_abonnement NOT LIKE (SELECT Numero_abonnement FROM Abonnement WHERE Numero_abonnement= @FK_num_abonnement)
		 BEGIN
			PRINT 'Numero d''abonnement inexistant'
			RETURN;
		 END
		
		IF NOT EXISTS (SELECT * FROM Reservation_immediate WHERE Numero_reservation=@FK_num_reservation AND FK_num_abonnement = @FK_num_abonnement)
		BEGIN
			PRINT 'Aucune reservation correspondante a l''abonnement'
			RETURN;
		END
		IF NOT EXISTS (SELECT * FROM annulation_reservation_imm WHERE FK_num_reservation = @FK_num_reservation AND FK_num_abonnement = @FK_num_abonnement)
			BEGIN
			INSERT INTO annulation_reservation_imm(
					HD_annulation,
					FK_num_reservation,
					FK_num_abonnement
			)
			VALUES(
						CURRENT_TIMESTAMP,
						@FK_num_reservation,
						@FK_num_abonnement
			)
			UPDATE dbo.Reservation_immediate  SET Etat='Annule' WHERE Numero_reservation=@FK_num_reservation;

		--MAJ de l'attribut Disponibilite
		DECLARE @Exemplaire_id BIGINT;
		DECLARE @Disponibilite BIT;

		SET @Exemplaire_id = (SELECT FK_num_exemplaire FROM Reservation_immediate WHERE Numero_reservation=@FK_num_reservation);
		PRINT @Exemplaire_id;

		SET @Disponibilite = (SELECT Disponibilite FROM Exemplaires WHERE Numero_exemplaire=@Exemplaire_id);
		PRINT @Disponibilite;

		UPDATE dbo.Exemplaires SET Disponibilite = 1 WHERE Numero_exemplaire=@Exemplaire_id;
		PRINT @Disponibilite;

		--MAJ de l'attribut reserve

		DECLARE @Exemplaire_id1 BIGINT;
		DECLARE @Reserve BIT;

		SET @Exemplaire_id1 = (SELECT FK_num_exemplaire FROM Reservation_Livraison WHERE Numero_reservation = @FK_num_reservation);
		PRINT @Exemplaire_id1;

		SET @Reserve = (SELECT Reserve FROM Exemplaires WHERE Numero_exemplaire =@Exemplaire_id1);
		PRINT @Reserve;

		UPDATE dbo.Exemplaires SET Reserve = 0 WHERE Numero_exemplaire=@Exemplaire_id1;
		PRINT @Reserve;

											
		PRINT 'Annulation effectuée'

	END
	ELSE
		BEGIN
    		PRINT 'Annulation deja effectue'
	END
END
GO

/*L2 ATIC 2013 GROUPE ouf_tim					*/
/*BdD ouf_tim									*/
/*Procedure de location reservation immédiate   */
/*Auteur(s): PATRICK POL						*/
/*Testeur(s): PATRICK POL						*/
/*Correcteur: PATRICK POL						*/
/*Intégrateur: PATRICK POL						*/

USE "ouf_tim" 

IF OBJECT_ID ('dbo.Location_resa_imm','P') IS NOT NULL
DROP PROCEDURE dbo.Location_resa_imm;
GO
CREATE PROCEDURE dbo.Location_resa_imm(
	@FK_num_abonnement INT,
	@FK_num_exemplaire INT,
	@FK_num_reservation_imm INT
	
)

AS
BEGIN
	DECLARE	@HD_loc_resa_imm DATETIME,
			@Dfin_resa DATETIME,
		
			@Ddebut DATETIME,
			@Duree INT,
			@Date_fin_prevue DATETIME,
			@Date_fin_reelle DATETIME	 
			
	IF @FK_num_abonnement NOT LIKE (SELECT FK_num_abonnement FROM Reservation_immediate WHERE Numero_reservation = @FK_num_reservation_imm)
	BEGIN
		PRINT 'Aucun Numero d''abonnement trouvé'
		RETURN;
	END
	
	IF @FK_num_exemplaire NOT LIKE (SELECT FK_num_exemplaire FROM Reservation_immediate WHERE Numero_reservation = @FK_num_reservation_imm)
	BEGIN
		PRINT 'Aucun Numero d''exemplaire trouvé'
		RETURN;
	END
	
	SET @Ddebut = CURRENT_TIMESTAMP;
	SET @Duree = 1;
	SET @Date_fin_prevue = DATEADD(HH ,@Duree,@Ddebut);
	SET @Date_fin_reelle = NULL;
	
	SET @HD_loc_resa_imm = CURRENT_TIMESTAMP;
	SET @Dfin_resa = (SELECT HD_butoir FROM Reservation_immediate WHERE Numero_reservation = @FK_num_reservation_imm);
	
	
	
	IF @HD_loc_resa_imm > @Dfin_resa
	BEGIN
		PRINT 'Il fallait venir le : '+cast(@Dfin_resa as VARCHAR)
		PRINT 'Et là nous sommes le : '+cast(@HD_loc_resa_imm as VARCHAR)
		PRINT 'Horaire de location dépassé'
		RETURN;
	END
	
		BEGIN
			INSERT INTO Locations(
				Date_debut,
				Duree,
				Date_fin_prevue,
				Date_fin_reelle,
				FK_exemplaire,
				FK_num_abonnement
			)
			VALUES(
				@Ddebut,
				@Duree,
				@Date_fin_prevue,
				@Date_fin_reelle,
				@FK_num_exemplaire,
				@FK_num_abonnement
			) 
		END
	
		PRINT 'Votre location a bien été prise en compte'
		RETURN 1;
	
	
	
END
GO


/*L2 ATIC 2013 GROUPE ouf_tim					*/
/*BdD ouf_tim									*/
/*Procedure reservation livraison creer		    */
/*Auteur(s): LADURANTI Sandra BROCHEN ELISE		*/
/*Testeur(s): PATRICK POL MICKAEL GOUALARD		*/
/*Correcteur: GOUALARD MICKAEL                  */
/*Intégrateur: LADURANTI SANDRA					*/


IF OBJECT_ID('Reservation_livraison_creer', 'P') IS NOT NULL
	DROP PROCEDURE Reservation_livraison_creer;
GO 
CREATE PROCEDURE Reservation_livraison_creer
(
   @num_abonnement INT,
   @num_edition INT
)

AS

BEGIN
	
DECLARE @nom_abonnement NVARCHAR (50),
		@nb_locations_sim INT,
		@nom_abonne NVARCHAR (50),
		@num_exemplaire INT 

		
set @nb_locations_sim = NULL
set @nom_abonnement = NULL
/* faut convertir pasque DATETIME demande une date + une heure
mais GETDATE + 17:00:00 ça marche paset du coup faudrait faire le
truc en dessous mais jyarrivepasetcamepeteseverelescouilles
SELECT
CONVERT(TIME,GETDATE()) AS HourMinuteSecond,
GO
*/

select @nom_abonnement = FK_type_abonnement FROM Abonnement where  Numero_abonnement = @num_abonnement

    IF @nom_abonnement IS NULL
  begin
       PRINT 'mauvais nom abonnement'
       return;
  end

  select @nb_locations_sim = Exemplaires_simultanes FROM Type_abonnement WHERE @nom_abonnement = Nom

  IF (select count (*) FROM Locations WHERE FK_num_abonnement = @num_abonnement) >= @nb_locations_sim
  begin
	PRINT 'nombre locations max atteint'
	return;
  end

  SELECT TOP 1 @num_exemplaire = Numero_exemplaire  FROM Exemplaires WHERE @num_edition = FK_numero_edition AND Disponibilite = 1
  IF @num_exemplaire IS NULL
  begin
    PRINT 'Aucun exemplaire de dispo'
    return;
  end

  BEGIN 
    INSERT INTO Reservation_Livraison
        ( 
        HD_creation,
		HD_retour,
        Etat,
        FK_num_abonnement ,
        FK_num_exemplaire
        )        
 
    VALUES  
      (
		CURRENT_TIMESTAMP,
		CURRENT_TIMESTAMP+1,
        'En cours',
        @num_abonnement,
        @num_exemplaire
        )
  END
 
 UPDATE Exemplaires SET Disponibilite = 0 WHERE Numero_exemplaire = @num_exemplaire
      PRINT 'Reservation créée'
END
GO

/*L2 ATIC 2013 GROUPE ouf_tim					*/
/*BdD ouf_tim									*/
/*Tache de fond reservation livraison		    */
/*Auteur(s): PATRICK POL MICHAEL GOUALARD		*/
/*Testeur(s): LADURANTI SANDRA BROCHEN ELISE	*/
/*Correcteur : PATRICK POL						*/
/*Intégrateur: LADURANTI SANDRA					*/

IF OBJECT_ID('[dbo].[a_maj_reservation_liv]', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[a_maj_reservation_liv];
GO
CREATE procedure [dbo].[a_maj_reservation_liv]
 /*reservation*/
AS
begin

 /* declaree */
 DECLARE @numero_reserv int
 DECLARE @numero_abo int
 DECLARE @num_exem int
 DECLARE @Date_debut DATETIME
 DECLARE @Duree int
 DECLARE @Date_fin_prevue DATETIME
 DECLARE @Date_fin_reelle DATETIME

 DECLARE cur_num_reservation CURSOR LOCAL FOR
  SELECT Numero_reservation FROM dbo.Reservation_livraison
	WHERE  Etat='En cours'
 
 
 OPEN cur_num_reservation;
	FETCH NEXT FROM cur_num_reservation INTO @numero_reserv;
	IF @@FETCH_STATUS =-1
	BEGIN
		PRINT 'AUCUNE RESERVATION SUPPRIMER'
		RETURN 0;
	END
	ELSE
 
 
	while(@@FETCH_STATUS = 0)
	BEGIN
 
	SET @num_exem =( SELECT FK_num_exemplaire FROM Reservation_livraison WHERE Numero_reservation = @numero_reserv)
	/*UPDATE Reservation_livraison SET Etat = 'Accomplie' WHERE Numero_reservation  = @numero_reserv;	*/
	
	UPDATE Exemplaires SET Disponibilite = 0 WHERE Numero_exemplaire = @num_exem;
	UPDATE Exemplaires SET Reserve = 1 WHERE Numero_exemplaire = @num_exem; 
	
	SET @numero_abo = (SELECT FK_num_abonnement FROM Reservation_Livraison WHERE Numero_reservation = @numero_reserv)
	SET @Date_debut = CURRENT_TIMESTAMP
	SET @Duree = 24
	SET @Date_fin_prevue = DATEADD(HOUR,@Duree,@Date_debut)
	SET @Date_fin_reelle = NULL
	INSERT INTO Locations (
	Date_debut,
	Duree,
	Date_fin_prevue,
	Date_fin_reelle,
	FK_exemplaire,
	FK_num_abonnement
	)
	VALUES
	(
	@Date_debut,
	@Duree,
	@Date_fin_prevue,
	@Date_fin_reelle,
	@num_exem,
	@numero_abo
	)
 PRINT @num_exem;
 EXEC preparation_colis
 PRINT 'la reservation est envoyé à la poste par la tache de fond'
 FETCH NEXT FROM cur_num_reservation INTO @numero_reserv; 
 END

 
 CLOSE cur_num_reservation;
 DEALLOCATE cur_num_reservation;
 PRINT 'FIN DE LA TACHE DE FOND MAJ ANNULATION'
 RETURN 1;
END
GO

/*L2 ATIC 2013 GROUPE Ouftim */
/*BdD Ouftim */
/*procedure annulation livraison */
/*Auteur(s): PATRICK POL MICKAEL GOUALARD */
/*Testeur(s):PATRICK POL */
/*Correcteur: PATRICK POL */
/*Intégrateur: SANDRA LADURANTI*/

IF OBJECT_ID ('dbo.annulation_livraison_creer', 'P') IS NOT NULL
DROP PROCEDURE dbo.annulation_livraison_creer;
GO
CREATE PROCEDURE dbo.annulation_livraison_creer(
	@HD_annulation DATETIME,
	@FK_num_reservation INT,
	@FK_num_abonnement INT
	
)

AS
BEGIN
DECLARE @Num_exemp INT

IF CONVERT(TIME, @HD_annulation) > '16:00:00'
		 BEGIN
			PRINT 'Delais d''annulation depasse'
			Return;
		 END
 
IF @FK_num_reservation NOT LIKE (SELECT Numero_reservation  FROM Reservation_livraison WHERE Numero_reservation=@FK_num_reservation)
	BEGIN
		PRINT 'Numero de reservation incorrect'
		RETURN;
	END

IF @FK_num_abonnement NOT LIKE (SELECT Numero_abonnement FROM Abonnement WHERE Numero_abonnement=@FK_num_abonnement)
	BEGIN
		PRINT 'Numero d''abonnement inexistant'
		RETURN;
	END
	
SET @Num_exemp = (SELECT FK_num_exemplaire FROM Reservation_Livraison WHERE Numero_reservation=@FK_num_reservation)
	
IF NOT EXISTS (SELECT * FROM annulation_livraison)
BEGIN
	INSERT INTO annulation_livraison(
		HD_annulation,
		FK_num_reservation,
		FK_num_abonnement
		)
	VALUES(
		CURRENT_TIMESTAMP,
		@FK_num_reservation,
		@FK_num_abonnement
		)
UPDATE dbo.Reservation_livraison  SET Etat='Annule' WHERE Numero_reservation=@FK_num_reservation;
UPDATE dbo.Exemplaires SET Disponibilite = 1 WHERE Numero_exemplaire = @Num_exemp;
UPDATE dbo.Exemplaires SET Reserve = 0 WHERE Numero_exemplaire = @Num_exemp;

-- Technique de la variable interne pour mettre à jour la disponibilite de l'exemplaire


DECLARE @Exemplaire_id BIGINT;
DECLARE @Disponibilite BIT;

SET @Exemplaire_id = (SELECT FK_num_exemplaire FROM Reservation_Livraison  WHERE Numero_reservation=@FK_num_reservation);
PRINT @Exemplaire_id;

SET @Disponibilite = (SELECT Disponibilite FROM Exemplaires WHERE Numero_exemplaire=@Exemplaire_id);
PRINT @Disponibilite;

UPDATE dbo.Exemplaires SET Disponibilite = 1 WHERE Numero_exemplaire=@Exemplaire_id;
PRINT @Disponibilite;

-- Technique de la variable interne pour mettre à jour la disponibilite de l'exemplaire

DECLARE @Exemplaire_id1 BIGINT;
DECLARE @Reserve BIT;

SET @Exemplaire_id1 = (SELECT FK_num_exemplaire FROM Reservation_Livraison WHERE Numero_reservation = @FK_num_reservation);
PRINT @Exemplaire_id1;

SET @Reserve = (SELECT Reserve FROM Exemplaires WHERE Numero_exemplaire =@Exemplaire_id1);
PRINT @Reserve;

UPDATE dbo.Exemplaires SET Reserve = 0 WHERE Numero_exemplaire=@Exemplaire_id1;
PRINT @Reserve;

											
PRINT 'Annulation effectué'

END
ELSE
  BEGIN
	PRINT 'Annulation impossible'
  END
END
GO

/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim										    */
/*Procedure unitaire retour location				    */
/*Auteur(s): PATRICK POL								*/
/*testeur(s): BROCHEN Elise								*/
/*Correcteur : Patrick POL								*/
/*Intégrateur: LADURANTI Sandra							*/

IF OBJECT_ID('dbo.retour_location_creer', 'P') IS NOT NULL
DROP PROCEDURE dbo.retour_location_creer;
GO
CREATE PROCEDURE dbo.retour_location_creer(
	@Date_retour DATETIME,
	@FK_num_location INT,
	@FK_num_abonnement INT
)

AS
BEGIN
	DECLARE @Date_finR DATETIME
	
	
	IF @FK_num_location NOT LIKE (SELECT Numero_location FROM Locations WHERE Numero_location=@FK_num_location)
	BEGIN
		PRINT 'Numero de location inexistant'
		RETURN;
	END
	
	IF @FK_num_abonnement NOT LIKE (SELECT FK_num_abonnement FROM Locations WHERE Numero_location=@FK_num_location)
	BEGIN
		PRINT 'Le numero d''abonnement correspond à aucune réservation'
		RETURN;
	END
	
	SET @Date_finR = (SELECT Date_fin_reelle FROM Locations WHERE @FK_num_location = Numero_location)

	IF @Date_finR IS NOT NULL
	BEGIN
		PRINT 'Retour de location déjà effectué'
		RETURN;
	END
	
	BEGIN
		INSERT INTO Retour_location(
					Date_retour,
					FK_num_location
		)
		VALUES(
				@Date_retour,
				@FK_num_location
		)
	END
	
--On met à jour la date de retour dans la table location

	UPDATE dbo.Locations SET Date_fin_reelle = @Date_retour  FROM Locations WHERE Numero_location = @FK_num_location;	
	
--On remet la disponibilité de l'exemplaire à 1
	
	DECLARE @Exemplaire_id1 BIGINT;
	DECLARE @Disponibilite BIT;
	

	SET @Exemplaire_id1 = (SELECT FK_exemplaire FROM Locations WHERE Numero_location = @FK_num_location);
	
	SET @Disponibilite = (SELECT Disponibilite FROM Exemplaires WHERE Numero_exemplaire =@Exemplaire_id1);
	
	IF (SELECT Supprimer FROM Exemplaires WHERE Numero_exemplaire = @Exemplaire_id1) = 0
		BEGIN
		UPDATE dbo.Exemplaires SET Disponibilite = 1 WHERE Numero_exemplaire=@Exemplaire_id1;
		END

--On augment le niveau d'usure de l'exemplaire de 1

	DECLARE @Exemplaire_id2 BIGINT;
	DECLARE @Usure INT;

	SET @Exemplaire_id2 = (SELECT FK_exemplaire FROM Locations WHERE Numero_location = @FK_num_location);
	

	SET @Usure = (SELECT Taux_usure FROM Exemplaires WHERE Numero_exemplaire = @Exemplaire_id2);
	

	UPDATE dbo.Exemplaires SET Taux_usure = @Usure + 1 WHERE Numero_exemplaire=@Exemplaire_id2;
		
	

-- On fait paye le client lors de son retour et on verifie en meme temps si il est en retard

	DECLARE @Date_finP DATETIME;

	DECLARE @Locations_id INT;
	DECLARE @Abonnement_id INT;
	DECLARE @Compte_id INT;
	DECLARE @Type_abo_id NVARCHAR (50);
	DECLARE @Solde MONEY;
	DECLARE @Prix_location MONEY;
	DECLARE @Prix_retard MONEY;
	DECLARE @New_Solde MONEY;

	SET @Date_finP = (SELECT Date_fin_prevue FROM Locations WHERE Numero_location =@Locations_id)
	PRINT @Date_finP;

	SET @Abonnement_id = @FK_num_abonnement 
	PRINT 'Votre numero d''abonnement est le : '+cast(@Abonnement_id as VARCHAR);  
	SET @Compte_id = (SELECT FK_numcompte FROM Abonnement WHERE Numero_abonnement = @Abonnement_id )
	PRINT 'Votre compte est le numéro : '+cast(@Compte_id as VARCHAR);
	SET @Type_abo_id = (SELECT FK_type_abonnement FROM Abonnement WHERE Numero_abonnement = @Abonnement_id)
	PRINT 'Votre type d''abonnement est : '+cast(@Type_abo_id as VARCHAR);
	SET @Solde = (SELECT Montant FROM Compte WHERE Numero_compte = @Compte_id)
	PRINT 'Votre ancien soldes est de : '+cast(@Solde as VARCHAR);
	SET @Prix_location = (SELECT Prix_location FROM Type_abonnement WHERE Nom = @Type_abo_id)
	PRINT 'Le prix d''une location est de : '+cast(@Prix_location as VARCHAR);
	SET @Prix_retard = (SELECT Prix_retard FROM Type_abonnement WHERE Nom = @Type_abo_id)

		IF @Date_finP < @Date_retour
		BEGIN
			SET @New_Solde = @Solde - @Prix_location
			UPDATE dbo.Compte SET Montant = @New_Solde WHERE Numero_compte = @Compte_id;
			PRINT 'Voici le nouveau solde de votre compte : '+cast(@New_Solde as VARCHAR)
		END
		ELSE
	    BEGIN
			SET @New_Solde = @Solde - @Prix_location - @Prix_retard
			UPDATE dbo.Compte SET Montant = @New_Solde WHERE Numero_compte = @Compte_id;
			PRINT 'Vous avez été en retard, il vous allez donc payer en plus : '+cast(@Prix_retard as VARCHAR)
			PRINT 'Voici le nouveau solde de votre compte : '+cast(@New_Solde as VARCHAR)
		END
		
-- MISE A JOUR SUR LA RELANCE RETARD
	UPDATE Relance_retards SET Niveau_de_retard = 0 WHERE @FK_num_location = FK_num_location;
	UPDATE Relance_retards SET Etat = 'Supprimer' WHERE @FK_num_location = FK_num_location;  

	PRINT 'Votre retour a été pris en compte'
	RETURN 1;	 
END	
GO

/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim										    */
/*Procedure relance retard maj						    */
/*Auteur(s): PATRICK POL								*/
/*testeur(s): PATRICK POL								*/
/*Correcteur : PATRICK POL								*/
/*Intégrateur: LADURANTI Sandra							*/

IF OBJECT_ID('[dbo].[maj_relance_retard]', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[maj_relance_retard];
GO
CREATE procedure [dbo].[maj_relance_retard]
 /*reservation*/
AS
begin

 /* declaree */
 DECLARE @Numero_relance INT
 DECLARE @Numero_exem INT
 DECLARE @Niveau_retard INT
 DECLARE @Date_retour_loc DATETIME
 DECLARE @Date_crea_retard DATETIME
 DECLARE @MAJ_retard DATETIME
 
 SET @Date_retour_loc = CURRENT_TIMESTAMP
 
 DECLARE cur_maj_relance_retard CURSOR LOCAL FOR
  SELECT Numero_retard FROM dbo.Locations, Relance_retards
	WHERE Date_fin_prevue < CURRENT_TIMESTAMP 
		  AND Date_fin_reelle IS NULL 
		  AND Relance_retards.FK_num_location = Locations.Numero_location
		  AND Relance_retards.Niveau_de_retard <5
		 
 
 
 OPEN cur_maj_relance_retard;
	FETCH NEXT FROM cur_maj_relance_retard INTO @Numero_relance;
	IF @@FETCH_STATUS =-1
	BEGIN
		PRINT 'AUCUNE LOCATION EN RETARD'
		RETURN 0;
	END
	ELSE
 
 
	while(@@FETCH_STATUS = 0)
	BEGIN
 
		
		SET @Niveau_retard = (SELECT Niveau_de_retard FROM Relance_retards WHERE Numero_retard =@Numero_relance)
		SET @Date_crea_retard = CURRENT_TIMESTAMP
		SET @MAJ_retard = DATEADD(SECOND, 10,@Date_crea_retard)
		SET @Niveau_retard = @Niveau_retard + 1
	
		UPDATE Relance_retards SET Niveau_de_retard = @Niveau_retard WHERE Numero_retard =@Numero_relance;
		UPDATE Relance_retards SET Date_mise_a_jour = @MAJ_retard WHERE Numero_retard =@Numero_relance;
 
		PRINT 'ATTENTION VOUS ETES EN RETARD SUR VOTRE LOCATION'
		FETCH NEXT FROM cur_maj_relance_retard INTO @Numero_relance; 
	END

 CLOSE cur_maj_relance_retard;
 DEALLOCATE cur_maj_relance_retard;
 PRINT 'FIN DE LA TACHE DE FOND MAJ RELANCE RETARD'
 RETURN 1;
END
GO
/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim										    */
/*Procedure preparation livraison colis				    */
/*Auteur(s): PATRICK POL	GOUALARD MICKAEL			*/
/*testeur(s): BROCHEN Elise								*/
/*Correcteur : PATRICK POL								*/
/*Intégrateur: LADURANTI Sandra							*/

IF OBJECT_ID('[dbo].[preparation_colis]', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[preparation_colis];
GO
CREATE procedure [dbo].[preparation_colis]
 /*reservation*/
AS
begin

 /* declaree */
 DECLARE @numero_reserv int
 DECLARE @numero_abo int
 DECLARE @num_exem int
 DECLARE @Date_debut DATETIME
 DECLARE @Date_fin_reelle DATETIME

 
 DECLARE @Nom NVARCHAR(50)
 DECLARE @Prenom NVARCHAR(50)
 DECLARE @Pseudo NVARCHAR(50)
 DECLARE @Num_voie INT
 DECLARE @Comp_voie NVARCHAR(50)
 DECLARE @Type_voie NVARCHAR(50)
 DECLARE @Libelle NVARCHAR(50)
 DECLARE @Comp_libelle NVARCHAR(50)
 DECLARE @Code_postal INT
 DECLARE @Ville NVARCHAR(50)
 DECLARE @Cedex NVARCHAR(50)
 DECLARE @Pays NVARCHAR(50)
 
 DECLARE cur_num_reservation CURSOR LOCAL FOR
  SELECT Numero_reservation FROM dbo.Reservation_livraison
	WHERE Etat='En cours'
 
 
	OPEN cur_num_reservation;
	FETCH NEXT FROM cur_num_reservation INTO @numero_reserv;
	IF @@FETCH_STATUS =-1
	BEGIN
		PRINT 'AUCUN COLIS A PREPARER'
		RETURN 0;
	END
	ELSE
 
 
	while(@@FETCH_STATUS = 0)
	BEGIN
		/*On met à jour l'etat de la reservation*/
		
		SET @num_exem =( SELECT FK_num_exemplaire FROM Reservation_livraison WHERE Numero_reservation = @numero_reserv)
		UPDATE Reservation_livraison SET Etat = 'Accomplie' WHERE Numero_reservation  = @numero_reserv;
	
		/*On recupere le numero de l'abonnement */
		SET @numero_abo =(SELECT FK_num_abonnement FROM Reservation_Livraison WHERE Numero_reservation = @numero_reserv)
	
		/*On recupere les infos sur l'abonne via l'abonnement */
		SET @Nom = (SELECT TOP 1 FK_nom_abonne FROM Souscrire WHERE FK_num_abonnement=@numero_abo)
		SET @Prenom = (SELECT TOP 1 FK_prenom FROM Souscrire WHERE FK_num_abonnement=@numero_abo)
		SET @Pseudo =(SELECT TOP 1 FK_pseudo FROM Souscrire WHERE FK_num_abonnement=@numero_abo)
		SET @Num_voie = (SELECT Numero_de_voie FROM Abonne WHERE Nom=@Nom AND Prenom=@Prenom AND Pseudo=@Pseudo)
		SET @Comp_voie = (SELECT Complement_de_voie FROM Abonne WHERE Nom=@Nom AND Prenom=@Prenom AND Pseudo=@Pseudo)
		SET @Type_voie = (SELECT Type_de_voie FROM Abonne WHERE Nom=@Nom AND Prenom=@Prenom AND Pseudo=@Pseudo)
		SET @Libelle = (SELECT Libelle FROM Abonne WHERE Nom=@Nom AND Prenom=@Prenom AND Pseudo=@Pseudo)
		SET @Comp_libelle = (SELECT Complement_libelle FROM Abonne WHERE Nom=@Nom AND Prenom=@Prenom AND Pseudo=@Pseudo)
		SET @Code_postal = (SELECT Code_postal FROM Abonne WHERE Nom=@Nom AND Prenom=@Prenom AND Pseudo=@Pseudo)
		SET @Ville = (SELECT Ville FROM Abonne WHERE Nom=@Nom AND Prenom=@Prenom AND Pseudo=@Pseudo)
		SET @Cedex = (SELECT Cedex FROM Abonne WHERE Nom=@Nom AND Prenom=@Prenom AND Pseudo=@Pseudo)
		SET @Pays = (SELECT Pays FROM Abonne WHERE Nom=@Nom AND Prenom=@Prenom AND Pseudo=@Pseudo)
		
		IF @Comp_voie is NULL
		SET @Comp_voie = ''
		
		IF @Comp_libelle is NULL
		SET @Comp_libelle = ''
		
		IF @Cedex is NULL
		SET @Cedex = ''
		
		SET @Date_debut = CURRENT_TIMESTAMP
		SET @Date_fin_reelle = DATEADD(DAY,2,@Date_debut)
	
		PRINT 'Envoyé le: '+cast(@Date_debut as VARCHAR)
	
		PRINT 'Premiere Etiquette contenant l''adresse du client à imprime'
		PRINT 'Nom : '+cast(@Nom as VARCHAR)
	    PRINT 'Prenom : '+cast(@Prenom as VARCHAR)
		PRINT 'Pseudo : '+cast(@Pseudo as VARCHAR)
	    PRINT 'Adresse : '+cast(@Num_voie as VARCHAR)+' '+cast(@Comp_voie as VARCHAR)+' '+cast(@Type_voie as VARCHAR)+' '+cast(@Libelle as VARCHAR)+' '+cast(@Comp_libelle as VARCHAR)
	    PRINT 'Code Postal : '+cast(@Code_postal as VARCHAR)+' Ville: '+cast(@Ville as VARCHAR)+' '+cast(@Cedex as VARCHAR)
		PRINT 'Pays: '+cast(@Pays as VARCHAR)
 
	    PRINT 'Deuxieme Etiquette Contenant l''exemplaire, l''abonnement et le jour de retour à imprime'
		PRINT 'Numéro d''exemplaire: '+cast(@num_exem as VARCHAR)
		PRINT 'Numéro d''abonnement: '+cast(@numero_abo as VARCHAR)
		PRINT 'Date retour max: '+cast(@Date_fin_reelle as VARCHAR) 
 
 
		 FETCH NEXT FROM cur_num_reservation INTO @numero_reserv; 
	END
 
 CLOSE cur_num_reservation;
 DEALLOCATE cur_num_reservation;
 PRINT 'FIN DE LA TACHE DE FOND POUR LES COLIS DU JOUR'

 /* utiliser cette procédure pour faire un appel à location? */
 RETURN 1;
END
GO

--------------------------------------------------
/*L2 ATIC 2013 GROUPE ouf_tim					*/
/*BdD ouf_tim									*/
/*Tache de fond reservation livraison		    */
/*Auteur(s): PATRICK POL MICHAEL GOUALARD		*/
/*Testeur(s): LADURANTI SANDRA BROCHEN ELISE	*/
/*Correcteur : PATRICK POL						*/
/*Intégrateur: LADURANTI SANDRA					*/
--------------------------------------------------

IF OBJECT_ID('[dbo].[a_maj_reservation_liv]', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[a_maj_reservation_liv];
GO
CREATE procedure [dbo].[a_maj_reservation_liv]
 /*reservation*/
AS
begin

 /* declaree */
 DECLARE @numero_reserv int
 DECLARE @numero_abo int
 DECLARE @num_exem int
 DECLARE @Date_debut DATETIME
 DECLARE @Duree int
 DECLARE @Date_fin_prevue DATETIME
 DECLARE @Date_fin_reelle DATETIME

 DECLARE cur_num_reservation CURSOR LOCAL FOR
  SELECT Numero_reservation FROM dbo.Reservation_livraison
	WHERE  Etat='En cours'
 
 
 OPEN cur_num_reservation;
	FETCH NEXT FROM cur_num_reservation INTO @numero_reserv;
	IF @@FETCH_STATUS =-1
	BEGIN
		PRINT 'AUCUNE RESERVATION SUPPRIMER'
		RETURN 0;
	END
	ELSE
 
 
	while(@@FETCH_STATUS = 0)
	BEGIN
 
	SET @num_exem =( SELECT FK_num_exemplaire FROM Reservation_livraison WHERE Numero_reservation = @numero_reserv)
	/*UPDATE Reservation_livraison SET Etat = 'Accomplie' WHERE Numero_reservation  = @numero_reserv;	*/
	
	UPDATE Exemplaires SET Disponibilite = 0 WHERE Numero_exemplaire = @num_exem;
	UPDATE Exemplaires SET Reserve = 1 WHERE Numero_exemplaire = @num_exem; 
	
	SET @numero_abo = (SELECT FK_num_abonnement FROM Reservation_Livraison WHERE Numero_reservation = @numero_reserv)
	SET @Date_debut = CURRENT_TIMESTAMP
	SET @Duree = 24
	SET @Date_fin_prevue = DATEADD(HOUR,@Duree,@Date_debut)
	SET @Date_fin_reelle = NULL
	INSERT INTO Locations (
	Date_debut,
	Duree,
	Date_fin_prevue,
	Date_fin_reelle,
	FK_exemplaire,
	FK_num_abonnement
	)
	VALUES
	(
	@Date_debut,
	@Duree,
	@Date_fin_prevue,
	@Date_fin_reelle,
	@num_exem,
	@numero_abo
	)
 PRINT @num_exem;
 EXEC preparation_colis
 PRINT 'la reservation est envoyé à la poste par la tache de fond'
 FETCH NEXT FROM cur_num_reservation INTO @numero_reserv; 
 END

 
 CLOSE cur_num_reservation;
 DEALLOCATE cur_num_reservation;
 PRINT 'FIN DE LA TACHE DE FOND MAJ ANNULATION'
 RETURN 1;
END
GO

--------------------------------------------------------------------
/* Déclencheur type AFTER UPDATE                                  */
/* Création du trigger suppression exemplaire usé				  */
/* Auteur(s) : LADURANTI Sandra, BROCHEN Elise					  */ 
/* Correcteur: PATRICK POL										  */
/* Testeur(s) : LADURANTI Sandra								  */ 
/* Intégrateur(s) : LADURANTI Sandra							  */ 
--------------------------------------------------------------------
USE "ouf_tim" 
IF OBJECT_ID('declencheur_suppression_exemplaire_use') IS NOT NULL
DROP TRIGGER declencheur_suppression_exemplaire_use;
GO

CREATE TRIGGER declencheur_suppression_exemplaire_use
ON dbo.Exemplaires
AFTER UPDATE 
AS
	DECLARE @Num_exemplaire INT;
	DECLARE @Usure VARCHAR(20);
	
	
	SELECT @Num_exemplaire = Numero_exemplaire, @Usure = Taux_usure
	FROM inserted;
	
	IF @Usure = 5
	BEGIN
			IF EXISTS(SELECT * FROM Exemplaires WHERE Numero_exemplaire = @Num_exemplaire)
			BEGIN
					UPDATE Exemplaires SET  Disponibilite = 0, Supprimer = 2
					WHERE Numero_exemplaire = @Num_exemplaire
					PRINT 'L''exemplaire'+cast(@Num_exemplaire as VARCHAR)+'a été supprimé pour usure'
			END
			
    ELSE
			BEGIN
			PRINT 'Exemplaire non usé'
			END
	END
	
GO

--------------------------------------------------------------------
/* Création d'un trigger pour relance découvert sur le solde      */
/* du compte si insuffisant. Et annule quand on rempli le compte */
/* Auteur(s) : PATRICK POL										  */ 
/* Testeur(s) : BROCHEN ELISE									  */
/* Correcteur : Patrick POL										  */ 
/* Intégrateur(s) :  Patrick POL								  */ 
-------------------------------------------------------------------- 
USE "ouf_tim" 
IF OBJECT_ID('dbo.declencheur_relance_decouvert') IS NOT NULL
DROP TRIGGER dbo.declencheur_relance_decouvert;
GO

CREATE TRIGGER declencheur_relance_decouvert
ON dbo.COMPTE
AFTER UPDATE 
AS
	DECLARE @Num_Compte INT
	DECLARE @solde MONEY
	DECLARE @dateCourante DATETIME
	
	SET @dateCourante = GETDATE();
	
	SELECT @Num_Compte = Numero_compte, @solde = Montant
	FROM inserted;
	
	IF @solde < 0
	BEGIN
		IF NOT EXISTS(SELECT * FROM Relance_decouvert WHERE FK_numero_compte = @Num_Compte)
		BEGIN
			INSERT INTO Relance_decouvert
			(Niveau_decouvert ,Date_creation,Date_mise_a_jour,FK_numero_compte) 
			VALUES( 1, @dateCourante, @dateCourante, @Num_Compte);
			PRINT 'Nouvelle relance crée sur le compte :';
			PRINT @Num_Compte;
		END		
		ELSE
		BEGIN
			PRINT 'Relance déjà en cours';
		END		
	END	
GO

--------------------------------------------------------------------
/* Création d'un trigger pour supprimer la relance découverte     */
/* Auteur(s) : PATRICK POL										  */ 
/* Testeur(s) : BROCHEN ELISE									  */
/* Correcteur : Patrick POL										  */ 
/* Intégrateur(s) :  Patrick POL								  */ 
-------------------------------------------------------------------- 

USE "ouf_tim" 
IF OBJECT_ID('dbo.declencheur_suppression_relance_decouvert') IS NOT NULL
DROP TRIGGER dbo.declencheur_suppression_relance_decouvert;
GO

CREATE TRIGGER declencheur_suppression_relance_decouvert
ON dbo.COMPTE
AFTER UPDATE 
AS

	DECLARE @Num_compte INT
	DECLARE @solde MONEY
	DECLARE @dateCourante DATETIME

	
	SET @dateCourante = GETDATE();
	
	SELECT @Num_compte = Numero_compte, @solde = Montant
	FROM inserted;

	IF @solde >= 0
	BEGIN
		IF EXISTS (SELECT * FROM Relance_decouvert WHERE FK_numero_compte = @Num_compte)
		BEGIN
			DELETE FROM Relance_decouvert WHERE FK_numero_compte = @Num_compte; 
			PRINT 'Relance en cours supprimée sur le compte :';
			PRINT @Num_compte;
		END
		
		
			
	END
GO

/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim										    */
/*Procedure maj films								    */
/*Auteur(s): PATRICK POL								*/
/*testeur(s):	PATRICK POL								*/
/*Correcteur : PATRICK POL								*/
/*Intégrateur: PATRICK POL								*/
USE "ouf_tim"
IF OBJECT_ID ('maj_abonne', 'P') IS NOT NULL
DROP PROCEDURE maj_abonne;
GO
CREATE PROCEDURE maj_abonne(
	@Ancien_nom NVARCHAR (50),
	@Ancien_prenom NVARCHAR (50),
	@Ancien_pseudo NVARCHAR (50),
	
	@Nouveau_nom NVARCHAR (50),
	@Nouveau_prenom NVARCHAR(50),
	@Nouveau_pseudo NVARCHAR (50),
	@Nouveau_sexe NVARCHAR (50),
	@Nouveau_Numero_voie NVARCHAR(50),
	@Nouveau_Complement_de_voie nvarchar(50),
	@Nouveau_Type_de_voie nvarchar(50),
	@Nouveau_Libelle nvarchar (50),
	@Nouveau_Complement_libelle nvarchar(50) ,
	@Nouveau_Code_postal nvarchar(50) ,
	@Nouveau_Ville nvarchar(50) ,
	@Nouveau_Cedex nvarchar(50),
	@Nouveau_Pays nvarchar(50),
	@Nouveau_Numero_telephone nvarchar(50) ,
	@Nouveau_Adresse_email nvarchar(50)
)

AS
BEGIN

DECLARE @DN DATE
DECLARE @num_abo INT

DECLARE @Nom NVARCHAR (50)
DECLARE @Prenom NVARCHAR (50)
DECLARE @Pseudo NVARCHAR (50)
DECLARE @Sexe NVARCHAR (50)
DECLARE @Numero_voie NVARCHAR (50)
DECLARE @Complement_de_voie NVARCHAR (50)
DECLARE @Type_de_voie NVARCHAR (50)
DECLARE @Libelle NVARCHAR (50)
DECLARE @Complement_libelle NVARCHAR (50)
DECLARE @Ville NVARCHAR (50)
DECLARE @Code_postal NVARCHAR (50)
DECLARE @Cedex NVARCHAR (50)
DECLARE @Pays NVARCHAR (50)
DECLARE @Numero_telephone NVARCHAR (50)
DECLARE @Adresse_email NVARCHAR (50)
DECLARE @Supprimer INT

PRINT ' --- Modification de l''abonne --- '
PRINT ' --- Si vous désiriez ne rien modifie saisissez ''_'' --'

IF NOT EXISTS(SELECT * FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo )
	BEGIN
		PRINT 'Abonne inconnu'
		RETURN;
	END

IF EXISTS (SELECT * FROM Abonne WHERE Nom=@Nouveau_nom AND Prenom=@Nouveau_prenom AND Pseudo = @Nouveau_pseudo)
	BEGIN
		PRINT 'Abonne existant'
		RETURN;
	END
SET @Supprimer = 0
SET @DN = (SELECT Date_de_naissance FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)

DECLARE cur_abonne CURSOR LOCAL FOR
	SELECT Numero_abonnement FROM Abonnement, Souscrire
	WHERE Souscrire.FK_num_abonnement = Numero_abonnement
		  AND Souscrire.FK_nom_abonne = @Ancien_nom
		  AND Souscrire.FK_prenom = @Ancien_prenom
		  AND Souscrire.FK_pseudo = @Ancien_pseudo
	
	
OPEN cur_abonne;
	FETCH NEXT FROM cur_abonne INTO @num_abo;
	IF @@FETCH_STATUS =-1
	BEGIN
		PRINT 'Aucune modification a effectué'
		RETURN 0;
	END
	
	ELSE
	
	WHILE (@@FETCH_STATUS = 0)
	BEGIN


IF @Nouveau_nom = '_'
	BEGIN
		SET @Nom = @Ancien_nom 
	END
	ELSE
	BEGIN
		SET @Nom = @Nouveau_nom
	END
	
IF @Nouveau_prenom = '_'
	BEGIN
		SET @Prenom = @Ancien_prenom 
	END
	ELSE
	BEGIN
		SET @Prenom = @Nouveau_prenom 
	END
	
IF @Nouveau_pseudo= '_'
	BEGIN
		SET @Pseudo = @Ancien_pseudo 
	END
	ELSE
	BEGIN
		SET @Pseudo = @Nouveau_pseudo
	END

IF @Nouveau_sexe = '_'
	BEGIN
	SET @Sexe = (SELECT Sexe FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
ELSE
	BEGIN
	SET @Sexe = @Nouveau_Sexe
	END
IF @Nouveau_Numero_voie = '_'
	BEGIN
		SET @Numero_voie = (SELECT Numero_de_voie FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
	ELSE
	BEGIN
		SET @Numero_voie = @Nouveau_Numero_voie
	END
	
IF @Nouveau_Complement_de_voie = '_'
	BEGIN
		SET @Complement_de_voie = (SELECT Complement_de_voie FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
	ELSE
	BEGIN
		SET @Complement_de_voie = @Nouveau_Complement_de_voie 
	END

IF @Nouveau_Type_de_voie = '_'
	BEGIN
		SET @Type_de_voie = (SELECT Type_de_voie FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
	ELSE
	BEGIN
		SET @Type_de_voie = @Nouveau_Type_de_voie
	END
	
IF @Nouveau_Libelle = '_'
	BEGIN
		SET @Libelle = (SELECT Libelle FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
	ELSE
	BEGIN
		SET @Libelle = @Nouveau_Libelle
	END

IF @Nouveau_Complement_libelle = '_'
	BEGIN
		SET @Complement_libelle = (SELECT Complement_libelle FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
	ELSE
	BEGIN
		SET @Complement_libelle = @Nouveau_Libelle
	END

IF @Nouveau_Code_postal = '_'
	BEGIN
		SET @Code_postal = (SELECT Code_postal FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
	ELSE
	BEGIN
		SET @Code_postal = @Nouveau_Code_postal
	END

IF @Nouveau_Ville = '_'
	BEGIN
		SET @Ville = (SELECT Ville FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
	ELSE
	BEGIN
		SET @Ville = @Nouveau_Ville
	END

IF @Nouveau_Cedex = '_'
	BEGIN
		SET @Cedex = (SELECT Cedex FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
	ELSE
	BEGIN
		SET @Cedex = @Nouveau_Cedex
	END

IF @Nouveau_Pays = '_'
	BEGIN
		SET @Pays = (SELECT Pays FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
	ELSE
	BEGIN
		SET @Pays = @Nouveau_Pays
	END

IF @Nouveau_Numero_telephone = '_'
	BEGIN
		SET @Numero_telephone = (SELECT Numero_telephone FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
	ELSE
	BEGIN
		SET @Numero_telephone = @Nouveau_Numero_telephone
	END

IF @Nouveau_Adresse_email = '_'
	BEGIN
		SET @Adresse_email = (SELECT Adresse_email FROM Abonne WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo)
	END
	ELSE
	BEGIN
		SET @Adresse_email = @Nouveau_Adresse_email
	END

UPDATE Abonne SET Nom=@Nom, Prenom=@Prenom, Pseudo=@Pseudo, Date_de_naissance = @DN, Sexe=@Sexe, Numero_de_voie=@Numero_voie, Complement_de_voie=@Complement_de_voie, Type_de_voie=@Type_de_voie,
				  Libelle=@Libelle, Complement_libelle= @Complement_libelle, Code_postal=@Code_postal, Ville=@Ville, Cedex=@Cedex, Pays=@Pays, Numero_telephone=@Numero_telephone, Adresse_email=@Adresse_email, Supprimer = @Supprimer 
WHERE Nom=@Ancien_nom AND Prenom = @Ancien_prenom AND Pseudo = @Ancien_pseudo;



	FETCH NEXT FROM cur_abonne INTO @num_abo; 
	END
 
 CLOSE cur_abonne;
 DEALLOCATE cur_abonne;

END
GO


/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim										    */
/*Procedure maj edition								    */
/*Auteur(s): PATRICK POL								*/
/*testeur(s):	PATRICK POL								*/
/*Correcteur : PATRICK POL								*/
/*Intégrateur: PATRICK POL								*/
USE "ouf_tim" 

IF OBJECT_ID ('maj_edition', 'P') IS NOT NULL
DROP PROCEDURE maj_edition;
GO
CREATE PROCEDURE maj_edition(
	 @Num_edition INT,
	
	 @Nouveau_Nom NVARCHAR (50),
     @Nouveau_Annee_de_sortie INT,
     @Nouveau_Duree_film INT,
     @Nouveau_limite_age INT,
     @Nouveau_Support NVARCHAR (50),
     @Nouveau_Type_couleur NVARCHAR (50),
     @Nouveau_Type_son NVARCHAR (50)
     
)

AS 
BEGIN


PRINT ' --- Pour ne rien changer inserer ''_'' et 0 pour la Duree, l''annee, limite_age ---' 

DECLARE @Nom NVARCHAR (50)
DECLARE @Annee_de_sortie INT
DECLARE @Duree_film INT
DECLARE @limite_age INT
DECLARE @Support NVARCHAR (50)
DECLARE @Date_insertion DATETIME
DECLARE @Type_couleur NVARCHAR (50)
DECLARE @Type_son NVARCHAR (50)
DECLARE @FK_titre NVARCHAR (50)
DECLARE @FK_complement_titre NVARCHAR (50)

DECLARE @Sup INT
SET @Sup = 0
SET @Date_insertion = (SELECT Date_insertion FROM Edition WHERE Numero_edition=@Num_edition)

IF NOT EXISTS (SELECT Numero_edition FROM Edition WHERE @Num_edition=Numero_edition)
BEGIN
	PRINT 'Le numero d''edition saisie n''existe pas'
	RETURN;
END

SET @FK_titre = (SELECT FK_titre FROM Edition WHERE Numero_edition=@Num_edition)
SET @FK_complement_titre = (SELECT FK_complement_titre FROM Edition WHERE Numero_edition=@Num_edition)

-- On met les SET à jour avant la mise à jour de l'edition

DECLARE @cur_num_edition INT

DECLARE cur_maj_edition CURSOR LOCAL FOR
SELECT TOP 1 Numero_edition FROM Edition 
WHERE FK_titre=@FK_titre AND FK_complement_titre=@FK_complement_titre

OPEN cur_maj_edition;
FETCH NEXT FROM cur_maj_edition INTO @cur_num_edition;
	IF @@FETCH_STATUS =-1
	BEGIN
		PRINT 'Aucune modification a effectué'
		RETURN 0;
	END
	
	ELSE
	WHILE (@@FETCH_STATUS = 0)
	BEGIN

	SET @Date_insertion = (SELECT Date_insertion FROM Edition WHERE Numero_edition=@Num_edition)
	IF @Nouveau_Nom = '_'
		BEGIN
			SET @Nom = (SELECT Nom FROM Edition WHERE Numero_edition=@Num_edition)
		END
		ELSE
		BEGIN
			SET @Nom = @Nouveau_Nom
		END

	IF @Nouveau_Annee_de_sortie = 0
		BEGIN
			SET @Annee_de_sortie = (SELECT Annee_de_sortie FROM Edition WHERE Numero_edition=@Num_edition)
		END
		ELSE
		BEGIN
			SET @Annee_de_sortie = @Nouveau_Annee_de_sortie 
		END

	IF @Nouveau_Duree_film = 0
		BEGIN
			SET @Duree_film = (SELECT Duree_film  FROM Edition WHERE Numero_edition=@Num_edition)
		END
		ELSE
		BEGIN
			SET @Duree_film = @Nouveau_Duree_film 
		END

	IF @Nouveau_limite_age = 0
		BEGIN
			SET @limite_age = (SELECT limite_age FROM Edition WHERE Numero_edition=@Num_edition)
		END
		ELSE
		BEGIN
			SET @limite_age = @Nouveau_limite_age 
		END

	IF @Nouveau_Support = '_'
		BEGIN
			SET @Support = (SELECT Support FROM Edition WHERE Numero_edition=@Num_edition)
		END
		ELSE
		BEGIN
			SET @Support = @Nouveau_Support 
		END

	IF @Nouveau_Type_couleur = '_'
		BEGIN
			SET @Type_couleur = (SELECT Type_couleur FROM Edition WHERE Numero_edition=@Num_edition)
		END
		ELSE
		BEGIN
			SET @Type_couleur = @Nouveau_Type_couleur
		END

	IF @Nouveau_Type_son = '_'
		BEGIN
			SET @Type_son = (SELECT Type_son FROM Edition WHERE Numero_edition=@Num_edition)
		END
		ELSE
		BEGIN
			SET @Type_son = @Nouveau_Type_son
		END


-- On vérifie qu'on ne retrouve pas plusieurs fois la même edition
	
	IF @Nom=(SELECT Nom FROM Edition WHERE Numero_edition=@cur_num_edition)
		AND @Annee_de_sortie = (SELECT Annee_de_sortie FROM Edition WHERE Numero_edition=@cur_num_edition)
		AND @Duree_film = (SELECT Duree_film FROM Edition WHERE Numero_edition=@cur_num_edition)
		AND @limite_age = (SELECT limite_age FROM Edition WHERE Numero_edition=@cur_num_edition)
		AND @Support = (SELECT Support FROM Edition WHERE Numero_edition=@cur_num_edition)
		AND @Type_couleur = (SELECT Type_couleur FROM Edition WHERE Numero_edition=@cur_num_edition)
		AND @Type_son = (SELECT Type_son FROM Edition WHERE Numero_edition=@cur_num_edition)
	BEGIN
		PRINT 'Vous avez déjà cette édition'
		RETURN;
	END
	ELSE
	BEGIN
		UPDATE Edition SET Nom=@Nom, Annee_de_sortie = @Annee_de_sortie , Duree_film = @Duree_film , limite_age = @limite_age , Support = @Support , Date_insertion = @Date_insertion , Type_couleur = @Type_couleur , Type_son = @Type_son , Supprimer = @Sup , FK_titre = @FK_titre , FK_complement_titre =@FK_complement_titre 
		WHERE Numero_edition=@Num_edition;
	END
	
	FETCH NEXT FROM cur_maj_edition INTO @cur_num_edition;
	
	END
CLOSE cur_maj_edition;
DEALLOCATE cur_maj_edition;
	

END
GO


/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim										    */
/*Procedure maj films								    */
/*Auteur(s): PATRICK POL								*/
/*testeur(s):	PATRICK POL								*/
/*Correcteur : PATRICK POL								*/
/*Intégrateur: PATRICK POL								*/


USE "ouf_tim"
IF OBJECT_ID ('maj_film', 'P') IS NOT NULL
DROP PROCEDURE maj_film;
GO
CREATE PROCEDURE maj_film(
	@Ancien_titre NVARCHAR(50),
	@Ancien_comp_titre NVARCHAR(50),
	
	@Nouveau_titre NVARCHAR (50),
	@Nouveau_comp_titre NVARCHAR (50),
	@Nouveau_annee INT,
	@Nouveau_nationalite NVARCHAR (50),
	@Nouveau_duree INT
)

AS
BEGIN

PRINT '--- Modification d''un film ---'
PRINT '--- Pour ne rien modifie entrer ''_'' et 0 pour l''année et la durée---'

DECLARE @num_edition INT

DECLARE @Titre NVARCHAR (50)
DECLARE @Comp_Titre NVARCHAR (50)
DECLARE @Annee INT
DECLARE @Nationalite NVARCHAR (50)
DECLARE @Duree INT

IF NOT EXISTS (SELECT * FROM Films WHERE Titre=@Ancien_titre AND Complement_titre =@Ancien_comp_titre )
	BEGIN
		PRINT 'Ce film n''est pas dans notre catalogue'
		RETURN;
	END
	
IF EXISTS (SELECT * FROM Films WHERE Titre=@Nouveau_titre AND Complement_titre = @Nouveau_comp_titre )
	BEGIN
		PRINT 'Ce film est déjà dans notre catalogue'
		RETURN;
	END

DECLARE cur_maj_film CURSOR LOCAL FOR
	SELECT * FROM Jouer, Films, Appartenir, Attribuer, Realiser
	WHERE Jouer.FK_titre_film = @Ancien_titre AND Jouer.FK_complement_titre = @Ancien_comp_titre
	  OR Appartenir.FK_titre = @Ancien_titre  AND Appartenir.FK_complement_titre = @Ancien_comp_titre
	  OR Attribuer.FK_titre_film = @Ancien_titre AND Attribuer.FK_complement_titre = @Ancien_comp_titre
	  OR Realiser.FK_titre_film = @Ancien_titre AND Realiser.FK_complement_titre = @Ancien_comp_titre
	 
OPEN cur_maj_film;
	FETCH NEXT FROM cur_maj_film ;
	IF @@FETCH_STATUS =-1
	BEGIN
		PRINT 'Aucune modification a effectué'
		RETURN 0;
	END
	
	ELSE
	
	WHILE (@@FETCH_STATUS = 0)
	BEGIN 
	
DECLARE @Sup INT
SET @Sup = 0

IF @Nouveau_titre = '_'
	BEGIN
		SET @Titre = @Ancien_titre
	END
	ELSE
	BEGIN
		SET @Titre = @Nouveau_titre
	END

IF @Nouveau_comp_titre = '_'
	BEGIN
		SET @Comp_Titre = @Ancien_comp_titre
	END
	ELSE
	BEGIN
		SET @Comp_Titre  = @Nouveau_comp_titre
	END
	
IF @Nouveau_annee = 0
	BEGIN
		SET @Annee = (SELECT Annee_de_sortie  FROM Films WHERE Titre=@Ancien_titre AND Complement_titre = @Ancien_comp_titre)
	END
	ELSE
	BEGIN
		SET @Annee = @Nouveau_annee
	END
	
IF @Nouveau_nationalite = '_'
	BEGIN
		SET @Nationalite = (SELECT Nationalite  FROM Films WHERE Titre=@Ancien_titre AND Complement_titre = @Ancien_comp_titre)
	END
	ELSE
	BEGIN
		SET @Nationalite = @Nouveau_nationalite
	END

IF @Nouveau_duree= 0
	BEGIN
		SET @Duree = (SELECT Duree  FROM Films WHERE Titre=@Ancien_titre AND Complement_titre = @Ancien_comp_titre)
	END
	ELSE
	BEGIN
		SET @Duree = @Nouveau_duree
	END

UPDATE Films SET Titre=@Titre, Complement_titre = @Comp_Titre , Annee_de_sortie = @Annee , Nationalite = @Nationalite , Duree = @Duree , Supprimer = @Sup
WHERE Titre=@Ancien_titre AND Complement_titre = @Ancien_comp_titre;


FETCH NEXT FROM cur_maj_film; 
	END
 
 CLOSE cur_maj_film;
 DEALLOCATE cur_maj_film


END
GO

/*L2 ATIC 2013 GROUPE ouf_tim                   */
/*BdD ouf_tim                                   */
/*Procedure suppression exemplaire              */
/*Auteur(s): GOUALARD MICKAEL                   */
/*Testeur(s):                                   */
/*Correcteur:                                   */
/*Intégrateur: PATRICK POL		                */ 
USE "ouf_tim"

IF OBJECT_ID('dbo.supprimer_exemplaire', 'P') IS NOT NULL
    DROP PROCEDURE dbo.supprimer_exemplaire;
GO
CREATE PROCEDURE dbo.supprimer_exemplaire
(
    @Numero_exemplaire INT
)

AS
BEGIN

    IF NOT EXISTS (SELECT * FROM Exemplaires WHERE Numero_exemplaire = @Numero_exemplaire)
    BEGIN
        PRINT 'Cet exemplaire n''existe pas';
        RETURN 2;   /*L'exemplaire n'existe pas*/
    END

    IF (SELECT Supprimer FROM Exemplaires WHERE Numero_exemplaire = @Numero_exemplaire) = 2
    BEGIN
        PRINT 'Cet exemplaire a deja ete supprimer';
        RETURN 2;   /*L'exemplaire est deja suppr*/
    END

    IF ((SELECT Reserve FROM Exemplaires WHERE Numero_exemplaire = @Numero_exemplaire) = 1 OR EXISTS (SELECT * FROM Locations WHERE FK_exemplaire = @Numero_exemplaire AND Date_fin_reelle IS NULL))
    BEGIN
        UPDATE Exemplaires SET Supprimer = 1 WHERE Numero_exemplaire = @Numero_exemplaire
        PRINT 'Cet exemplaire est reserve ou en location et ne peut pas etre supprimer pour le moment';
        RETURN 1;   /*L'exemplaire est reserve ou en location*/
    END

    ELSE
    BEGIN
        UPDATE Exemplaires SET Supprimer = 2 WHERE Numero_exemplaire = @Numero_exemplaire
        UPDATE Exemplaires SET Disponibilite = 0 WHERE Numero_exemplaire = @Numero_exemplaire
        PRINT 'Exemplaire a ete supprime';
        RETURN 0;   /*L'exemplaire à bien ete supprimer*/
    END

END
GO

/*L2 ATIC 2013 GROUPE ouf_tim                   */
/*BdD ouf_tim                                   */
/*Procedure suppression exemplaire              */
/*Auteur(s): GOUALARD MICKAEL                   */
/*Testeur(s):                                   */
/*Correcteur:                                   */
/*Intégrateur: PATRICK POL		                */ 

USE "ouf_tim"

IF OBJECT_ID('dbo.supprimer_edition', 'P') IS NOT NULL
    DROP PROCEDURE dbo.supprimer_edition;
GO
CREATE PROCEDURE dbo.supprimer_edition
(
    @Numero_edition INT
)

AS
BEGIN

    IF NOT EXISTS (SELECT * FROM Edition WHERE Numero_edition = @Numero_edition)
    BEGIN
        PRINT 'Cet edition n''existe pas';
        RETURN 2;   /*L'exemplaire n'existe pas*/
    END

    IF (SELECT Supprimer FROM Edition WHERE Numero_edition = @Numero_edition) = 2
    BEGIN
        PRINT 'Cet exemplaire a deja ete supprimer';
        RETURN 2;   /*L'edition est deja suppr*/
    END

    DECLARE @Numero_exemplaire INT 
    DECLARE @Cpt INT,
            @Tmp INT
    SET @Cpt = 0

    DECLARE curseur_supprimer_exemplaire CURSOR FOR
        SELECT Numero_exemplaire FROM Exemplaires WHERE FK_numero_edition = @Numero_edition AND Supprimer <> 2
     
    OPEN curseur_supprimer_exemplaire
     
    FETCH NEXT FROM curseur_supprimer_exemplaire INTO @Numero_exemplaire;
    
    IF @@FETCH_STATUS <> 0 
    BEGIN    
        PRINT 'Tous les exemplaires de cette edition sont deja supprime';
    END
    
    WHILE @@FETCH_STATUS = 0
    BEGIN
        EXEC @Tmp = dbo.supprimer_exemplaire @Numero_exemplaire;
        SET @Cpt = @Cpt + @Tmp;
        FETCH NEXT FROM curseur_supprimer_exemplaire INTO @Numero_exemplaire;
    END
     
    CLOSE curseur_supprimer_exemplaire
    DEALLOCATE curseur_supprimer_exemplaire

    IF @Cpt > 0
    BEGIN
        UPDATE Edition SET Supprimer = 1 WHERE Numero_edition = @Numero_edition
        PRINT 'L''edition ne peut pas etre supprimer';
        RETURN 1;
    END

    UPDATE Edition SET Supprimer = 2 WHERE Numero_edition = @Numero_edition

    --Suppression des tables de jointure rattacher
    DECLARE @FK_edition INT

    DECLARE curseur_supprimer_rattacher CURSOR FOR
        SELECT FK_edition FROM Rattacher WHERE FK_edition = @Numero_edition AND Supprimer = 0
     
    OPEN curseur_supprimer_rattacher
     
    FETCH NEXT FROM curseur_supprimer_rattacher INTO @FK_edition;
     
    WHILE @@FETCH_STATUS = 0
    BEGIN
        UPDATE Rattacher SET Supprimer = 2 WHERE FK_edition = @FK_edition
        FETCH NEXT FROM curseur_supprimer_rattacher INTO @FK_edition;
    END
     
    CLOSE curseur_supprimer_rattacher
    DEALLOCATE curseur_supprimer_rattacher

    --Suppression des tables de jointure afficher

    DECLARE curseur_supprimer_afficher CURSOR FOR
        SELECT FK_edition FROM Afficher WHERE FK_edition = @Numero_edition AND Supprimer = 0
     
    OPEN curseur_supprimer_afficher
     
    FETCH NEXT FROM curseur_supprimer_afficher INTO @FK_edition;
     
    WHILE @@FETCH_STATUS = 0
    BEGIN
        UPDATE Afficher SET Supprimer = 2 WHERE FK_edition = @FK_edition
        FETCH NEXT FROM curseur_supprimer_afficher INTO @FK_edition;
    END
     
    CLOSE curseur_supprimer_afficher
    DEALLOCATE curseur_supprimer_afficher

    PRINT 'L''edition a ete supprimer'
    RETURN 0;

END
GO

/*L2 ATIC 2013 GROUPE ouf_tim                   */
/*BdD ouf_tim                                   */
/*Procedure suppression film                    */
/*Auteur(s): GOUALARD MICKAEL                   */
/*Testeur(s):                                   */
/*Correcteur:                                   */
/*Intégrateur: GOUALARD MICKAEL                 */

USE "ouf_tim"

IF OBJECT_ID('dbo.supprimer_film', 'P') IS NOT NULL
    DROP PROCEDURE dbo.supprimer_film;
GO 
CREATE PROCEDURE dbo.supprimer_film
(
    @Titre NVARCHAR (50),
    @Complement_titre NVARCHAR (50)
)

AS
BEGIN

    DECLARE @Numero_edition INT

    IF @Titre NOT LIKE '%[A-Za-z ''- 0-9]%' OR @Titre IS NULL OR @Complement_titre NOT LIKE '%[A-Za-z ''- 0-9]%' OR @Complement_titre IS NULL
    BEGIN
        /*Test probablement inutile si on considère qu'on selectionne le film et qu'il a deja ete teste et par consequent ne peut pas avoir de valeur NULL ou de style Integer*/
        PRINT 'Le titre ou le complement de titre ne sont pas valide. Fin de la suppression.';
        RETURN;
    END

    IF NOT EXISTS (SELECT * FROM Films WHERE Titre = @Titre AND Complement_titre = @Complement_titre)
    BEGIN
        PRINT 'Le film n''existe pas. Fin de la suppression.';
        RETURN 2;
    END

    IF (SELECT Supprimer FROM Films WHERE Titre = @Titre AND Complement_titre = @Complement_titre) = 2
    BEGIN
        PRINT 'Le film a deja ete supprimer';
        RETURN 2;
    END

    DECLARE @Cpt INT,
            @Tmp INT
    SET @Cpt = 0

    DECLARE curseur_supprimer_edition CURSOR FOR
        SELECT Numero_edition FROM Edition WHERE FK_titre = @Titre AND FK_complement_titre = @Complement_titre AND Supprimer <> 2
     
    OPEN curseur_supprimer_edition
     
    FETCH NEXT FROM curseur_supprimer_edition INTO @Numero_edition;
    
    IF @@FETCH_STATUS <> 0 
    BEGIN    
        PRINT 'Tous les editions de ce film sont deja supprime';
    END
     
    WHILE @@FETCH_STATUS = 0
    BEGIN
        EXEC @Tmp = dbo.supprimer_edition @Numero_edition;
        SET @Cpt = @Cpt + @Tmp;
        FETCH NEXT FROM curseur_supprimer_edition INTO @Numero_edition;
    END
     
    CLOSE curseur_supprimer_edition
    DEALLOCATE curseur_supprimer_edition

    IF @Cpt > 0
    BEGIN
        UPDATE Films SET Supprimer = 1 WHERE Titre = @Titre AND Complement_titre = @Complement_titre
        PRINT 'L''edition ne peut pas etre supprimer';
        RETURN 1;
    END

    DECLARE @Nom NVARCHAR (50), 
            @Prenom NVARCHAR (50), 
            @Date_naissance NVARCHAR (50)

    DECLARE curseur_supprimer_acteur CURSOR FOR
        SELECT FK_nom_acteur, FK_prenom_acteur, FK_date_de_naissance_acteur FROM Jouer WHERE FK_titre_film = @Titre  AND FK_complement_titre = @Complement_titre AND Supprimer <> 2
     
    OPEN curseur_supprimer_acteur
     
    FETCH NEXT FROM curseur_supprimer_acteur INTO @Nom, @Prenom, @Date_naissance;
    
    IF @@FETCH_STATUS <> 0 
    BEGIN    
        PRINT 'Tous les acteurs relie uniquement a ce film sont deja supprime';
        RETURN 0;
    END
     
    WHILE @@FETCH_STATUS = 0
    BEGIN
        IF (SELECT COUNT (*) FROM Jouer WHERE FK_nom_acteur = @Nom AND  FK_prenom_acteur = @Prenom AND FK_date_de_naissance_acteur = @Date_naissance) = 1
        BEGIN
            UPDATE Acteur SET Supprimer = 2 WHERE Nom = @Nom AND Prenom = @Prenom AND Date_naissance = @Date_naissance
            PRINT 'Un acteur a ete supprime';
        END
        UPDATE Jouer SET Supprimer = 2 WHERE FK_titre_film = @Titre AND FK_complement_titre = @Complement_titre AND FK_nom_acteur = @Nom AND FK_prenom_acteur = @Prenom AND FK_date_de_naissance_acteur = @Date_naissance
        FETCH NEXT FROM curseur_supprimer_acteur INTO @Nom, @Prenom, @Date_naissance;
    END
     
    CLOSE curseur_supprimer_acteur
    DEALLOCATE curseur_supprimer_acteur

    SELECT @Nom = FK_nom_real FROM Realiser WHERE FK_titre_film = @Titre AND FK_complement_titre = @Complement_titre
    SELECT @Prenom = FK_prenom_real FROM Realiser WHERE FK_titre_film = @Titre AND FK_complement_titre = @Complement_titre
    SELECT @Date_naissance = FK_date_naissance FROM Realiser WHERE FK_titre_film = @Titre AND FK_complement_titre = @Complement_titre

    IF (SELECT COUNT (*) FROM Realiser WHERE FK_nom_real = @Nom AND FK_prenom_real = @Prenom AND FK_date_naissance = @Date_naissance) = 1
    BEGIN
        UPDATE Realisateur SET Supprimer = 1 WHERE Nom = @Nom AND Prenom = @Prenom AND Date_naissance = @Date_naissance
        PRINT 'Le realisateur de ce film a ete supprime';
    END

    UPDATE Realiser SET Supprimer = 2 WHERE FK_titre_film = @Titre AND FK_complement_titre = @Complement_titre AND FK_nom_real = @Nom AND FK_prenom_real = @Prenom AND FK_date_naissance = @Date_naissance

    UPDATE Films SET Supprimer = 2 WHERE Titre = @Titre AND Complement_titre = @Complement_titre
    PRINT 'Le film a ete supprimer';
    RETURN 0;

END
GO

--IL MANQUE TRIGGER SUR RETOUR_LOC QUI EXEC dbo.supprimer_film POUR LE FILM SI L'EXEMPLAIRE QUI VIENT D'ETRE RETOURNER EST EN SUPPRIMER = 1



USE "ouf_tim"

IF OBJECT_ID('dbo.declencheur_supprimer_film', 'TR') IS NOT NULL
    DROP TRIGGER dbo.declencheur_supprimer_film;
GO

CREATE TRIGGER dbo.declencheur_supprimer_film
ON Locations AFTER UPDATE 
AS
BEGIN
    DECLARE @Num_exemplaire INT,
            @Titre NVARCHAR (50),
            @Complement_titre NVARCHAR (50),
            @Num_edition INT

    SELECT @Num_exemplaire = FK_exemplaire FROM inserted

    IF (SELECT Supprimer FROM Exemplaires WHERE Numero_exemplaire = @Num_exemplaire) = 1
    BEGIN
        SELECT @Num_edition = FK_numero_edition FROM Exemplaires WHERE Numero_exemplaire = @Num_exemplaire;
        SELECT @Titre = FK_titre FROM Edition WHERE Numero_edition = @Num_edition;
        SELECT @Complement_titre = FK_complement_titre FROM Edition WHERE Numero_edition = @Num_edition;
        EXEC dbo.supprimer_film @Titre, @Complement_titre;
    END
END
GO


/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim suppression abonne -> reservation imm	    */
/*Auteur(s): PATRICK POL								*/
/*testeur(s): PATRICK POL								*/
/*Correcteur : 	PATRICK POL								*/
/*Intégrateur: LADURANTI Sandra							*/

USE "ouf_tim"
IF OBJECT_ID ('Suppression_abonne_resa_imm', 'P') IS NOT NULL
DROP PROCEDURE Suppression_abonne_resa_imm;
GO
CREATE PROCEDURE Suppression_abonne_resa_imm(
	@Num_abo INT
)

AS
BEGIN

	DECLARE @num_resa INT

	DECLARE cur_num_resa_imm CURSOR LOCAL FOR
	SELECT TOP 1 Numero_reservation FROM Reservation_immediate  WHERE FK_num_abonnement = @Num_abo AND Etat='En cours'

	OPEN cur_num_resa_imm ;
		FETCH NEXT FROM cur_num_resa_imm  INTO @num_resa;
		IF @@FETCH_STATUS =-1
		BEGIN
			PRINT 'Aucune reservation immediate en cours'
			RETURN 0;
		END
	
		ELSE
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
		
		PRINT 'Votre réservation immediate numéro :'+cast(@num_resa as VARCHAR)+' est toujours en cours'
		RETURN 1;
		
		FETCH NEXT FROM cur_num_resa_imm INTO @num_resa; 
		END
 
 CLOSE cur_num_resa_imm;
 DEALLOCATE cur_num_resa_imm;
		
		
END
GO

/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim suppression abonne -> reservation liv	    */
/*Auteur(s): PATRICK POL								*/
/*testeur(s): PATRICK POL								*/
/*Correcteur : 	PATRICK POL								*/
/*Intégrateur: LADURANTI Sandra							*/

USE "ouf_tim"
IF OBJECT_ID ('Suppression_abonne_resa_liv', 'P') IS NOT NULL
DROP PROCEDURE Suppression_abonne_resa_liv;
GO
CREATE PROCEDURE Suppression_abonne_resa_liv(
	@Num_abo INT
)

AS
BEGIN

	DECLARE @num_resa INT

	DECLARE cur_num_resa_liv CURSOR LOCAL FOR
	SELECT TOP 1 Numero_reservation FROM Reservation_livraison  WHERE FK_num_abonnement = @Num_abo

	OPEN cur_num_resa_liv ;
		FETCH NEXT FROM cur_num_resa_liv  INTO @num_resa;
		IF @@FETCH_STATUS =-1
		BEGIN
			PRINT 'Aucune reservation livraison en cours'
			RETURN 0;
		END
	
		ELSE
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
		
		PRINT 'Votre réservation livraison numéro :'+cast(@num_resa as VARCHAR)+' est toujours en cours'
		RETURN 1;
		
		FETCH NEXT FROM cur_num_resa_liv INTO @num_resa; 
		END
 
 CLOSE cur_num_resa_liv;
 DEALLOCATE cur_num_resa_liv;
		
		
END
GO


/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim suppression abonne -> location -> Relance */
/*Auteur(s): PATRICK POL								*/
/*testeur(s): PATRICK POL								*/
/*Correcteur : 	PATRICK POL								*/
/*Intégrateur: LADURANTI Sandra							*/

USE "ouf_tim"
IF OBJECT_ID ('Suppression_abonne_location', 'P') IS NOT NULL
DROP PROCEDURE Suppression_abonne_location;
GO
CREATE PROCEDURE Suppression_abonne_location(
	@Num_abo INT
)

AS
BEGIN

	DECLARE @num_location INT

	DECLARE cur_location CURSOR LOCAL FOR
	SELECT TOP 1 Numero_location FROM Locations  WHERE FK_num_abonnement = @Num_abo AND Date_fin_reelle is NULL

	OPEN cur_location ;
		FETCH NEXT FROM cur_location INTO @num_location;
		IF @@FETCH_STATUS =-1
		BEGIN
			PRINT 'Aucune location en cours'
			RETURN 0;
		END
	
		ELSE
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
		
		
		IF EXISTS(SELECT FK_num_location FROM Relance_retards WHERE FK_num_location = @num_location AND Etat = 'En cours')
			BEGIN
				PRINT 'Votre location numéro :'+cast(@num_location as VARCHAR)+' est toujours en cours'
				PRINT 'De plus vous avez un retard sur la location'
				RETURN 1;
			END
		ELSE
			BEGIN
				PRINT 'Votre location numéro :'+cast(@num_location as VARCHAR)+' est toujours en cours'
				PRINT 'Vous devez d''abord rendre la location'
				RETURN 1;
			END
		
		FETCH NEXT FROM cur_location INTO @num_location; 
		END
 
 CLOSE cur_location;
 DEALLOCATE cur_location;
		
		
END
GO

/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim suppression abonne -> Compte -> Relance   */
/*Auteur(s): PATRICK POL								*/
/*testeur(s): PATRICK POL								*/
/*Correcteur : 	PATRICK POL								*/
/*Intégrateur: LADURANTI Sandra							*/

USE "ouf_tim"
IF OBJECT_ID ('Suppression_abonne_compte', 'P') IS NOT NULL
DROP PROCEDURE Suppression_abonne_compte;
GO
CREATE PROCEDURE Suppression_abonne_compte(
	@Num_abo INT
)

AS
BEGIN

	DECLARE @num_compte INT

	DECLARE cur_compte CURSOR LOCAL FOR
	SELECT FK_numcompte FROM Abonnement  WHERE Numero_abonnement = @num_abo

	OPEN cur_compte ;
		FETCH NEXT FROM cur_compte INTO @num_compte;
		IF @@FETCH_STATUS =-1
		BEGIN
			PRINT 'Aucun compte en cours'
			RETURN 0;
		END
	
		ELSE
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
		
			DECLARE @Solde MONEY
	
			SET @Solde = (SELECT Montant FROM Compte WHERE Numero_compte = @num_compte)
	
			IF EXISTS (SELECT FK_numero_compte FROM Relance_decouvert WHERE FK_numero_compte =@num_compte )
			BEGIN
				PRINT 'Vous nous devez encore '+cast(@Solde as VARCHAR)+ 'euros'
				RETURN 1;
			END
			ELSE
			BEGIN
				PRINT 'Nous allons vous rembourser '+cast(@Solde as VARCHAR)+ 'euros'
			END
			
			FETCH NEXT FROM cur_compte INTO @num_compte;
			END
			
 
 CLOSE cur_compte;
 DEALLOCATE cur_compte;
		
		
END
GO

/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim suppression abonne  -> Souscrire		    */
/*Auteur(s): PATRICK POL								*/
/*testeur(s): PATRICK POL								*/
/*Correcteur : 	PATRICK POL								*/
/*Intégrateur: LADURANTI Sandra							*/

USE "ouf_tim"
IF OBJECT_ID ('Suppression_abonne_souscription', 'P') IS NOT NULL
DROP PROCEDURE Suppression_abonne_souscription;
GO
CREATE PROCEDURE Suppression_abonne_souscription(
	@Num_abo INT
)

AS
BEGIN

	DECLARE @num_souscription INT

	DECLARE cur_souscrire CURSOR LOCAL FOR
	SELECT FK_num_abonnement FROM Souscrire  WHERE FK_num_abonnement = @num_abo

	OPEN cur_souscrire ;
		FETCH NEXT FROM cur_souscrire;
		IF @@FETCH_STATUS =-1
		BEGIN
			PRINT 'Aucun souscription supprimer'
			RETURN 0;
		END
	
		ELSE
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
		
		DECLARE @var_resa_imm INT
			DECLARE @var_resa_liv INT
			DECLARE @var_location INT
			DECLARE @var_compte INT

			
			EXEC @var_resa_imm = Suppression_abonne_resa_imm @num_abo;			
			EXEC @var_resa_liv = Suppression_abonne_resa_liv @num_abo;			
			EXEC @var_location = Suppression_abonne_location @num_abo;
			EXEC @var_compte = Suppression_abonne_compte @num_abo;
			
			
			
			IF @var_resa_imm = 0 AND @var_resa_liv = 0 AND @var_location = 0 AND @var_compte = 0
			BEGIN
				
				UPDATE Souscrire SET Supprimer = 2 WHERE FK_num_abonnement = @num_abo;
			END
		
			
			
			FETCH NEXT FROM cur_souscrire;
			END
			
 
			CLOSE cur_souscrire;
			DEALLOCATE cur_souscrire;
				
END
GO


/*L2 ATIC 2013 GROUPE ouf_tim						    */
/*BdD ouf_tim suppression abonne					    */
/*Auteur(s): PATRICK POL								*/
/*testeur(s): PATRICK POL								*/
/*Correcteur : 	PATRICK POL								*/
/*Intégrateur: LADURANTI Sandra							*/

USE "ouf_tim"
IF OBJECT_ID ('Suppression_abonne', 'P') IS NOT NULL
DROP PROCEDURE Suppression_abonne;
GO
CREATE PROCEDURE Suppression_abonne(
	@Nom_sup NVARCHAR (50),
	@Prenom_sup NVARCHAR (50),
	@Pseudo_sup NVARCHAR (50)
)

AS
BEGIN

DECLARE @num_abo INT

IF NOT EXISTS (SELECT Nom, Prenom, Pseudo FROM Abonne WHERE Nom=@Nom_sup AND Prenom=@Prenom_sup AND Pseudo = @Pseudo_sup)
	BEGIN
		PRINT 'Abonne non existant dans la base'
		RETURN;
	END

DECLARE cur_num_abonnement CURSOR LOCAL FOR
SELECT TOP 1 FK_num_abonnement FROM Souscrire  WHERE FK_nom_abonne=@Nom_sup AND FK_prenom = @Prenom_sup AND FK_pseudo = @Pseudo_sup

OPEN cur_num_abonnement;
FETCH NEXT FROM cur_num_abonnement INTO @num_abo;
	IF @@FETCH_STATUS =-1
	BEGIN
		PRINT 'Aucune suppression a effectué'
		RETURN 0;
	END
	
	ELSE
	WHILE (@@FETCH_STATUS = 0)
		BEGIN
		
			PRINT '----- Avec votre abonnement numero : '+cast(@num_abo as VARCHAR)+'-----'
	
			DECLARE @var_souscrire INT
			DECLARE @Num_compte INT
			
			
			EXEC @var_souscrire = Suppression_abonne_souscription @num_abo;
			
			IF @var_souscrire = 0
			BEGIN
				SET @Num_compte = (SELECT FK_numcompte FROM Abonnement WHERE Numero_abonnement = @num_abo) 
				PRINT 'L''abonne '+cast(@Nom_sup as VARCHAR)+' '+cast(@Prenom_sup as VARCHAR)+' '+cast(@Pseudo_sup as VARCHAR)+' va être supprimer'
				UPDATE Abonne SET Supprimer = 2 WHERE Nom=@Nom_sup AND Prenom=@Prenom_sup AND Pseudo = @Pseudo_sup
				UPDATE Abonnement SET Supprimer = 2 WHERE Numero_abonnement = @num_abo
				UPDATE Compte SET Supprimer = 2 WHERE @Num_compte  = Numero_compte 
			END
			ELSE
			BEGIN
				PRINT 'l''abonne ne peut pas être supprimé actuellement'
			END
			


			FETCH NEXT FROM cur_num_abonnement INTO @num_abo; 
			END
 
	CLOSE cur_num_abonnement;
	DEALLOCATE cur_num_abonnement;
		
END		

GO
